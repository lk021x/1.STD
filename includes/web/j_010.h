#ifndef _J_010_H_
#define _J_010_H_

static const char j_010[]={
"HTTP/1.1 200 OK\r\nContent-Type:text/javascript\r\nAccept-Ranges:bytes\r\n\r\n"
 //* A Highcharts plugin for exporting data from a rendered chart as CSV, XLS or HTML table\n"
 //*\n"
 //* Author:   Torstein Honsi\n"
 //* Licence:  MIT\n"
 //* Version:  1.3.8\n"
 //global Highcharts, window, document, Blob \n"
"(function (factory) {\n"
    "if (typeof module === 'object' && module.exports) {\n"
        "module.exports = factory;\n"
    "} else {\n"
        "factory(Highcharts);\n"
    "}\n"
"})(function (Highcharts) {\n"
    "'use strict';\n"
    "var each = Highcharts.each,\n"
        "pick = Highcharts.pick,\n"
        "downloadAttrSupported = document.createElement('a').download !== undefined;\n"
    "Highcharts.setOptions({\n"
         // fixed Chinese lang options\n"
        "lang: {\n"
            "printChart: '打印图表',\n"
            "downloadJPEG: '下载 JPEG 文件',\n"
            "downloadPDF: '下载 PDF&nbsp;&nbsp; 文件',\n"
            "downloadPNG: '下载 PNG&nbsp; 文件',\n"
            "downloadSVG: '下载 SVG&nbsp; 文件',\n"
            "downloadCSV: '下载 CSV&nbsp; 文件',\n"
            "downloadXLS: '下载 XLS&nbsp;&nbsp; 文件'\n"
        "},\n"
        "exporting: {\n"
             // reset the default export server, to fixed Chinese filename \n"
            "url: 'http://export.hcharts.cn/index.php',\n"
            "buttons: {\n"
                "contextButton: {\n"
                "}\n"
            "}\n"
        "}\n"
    "});\n"
     // * Get the data rows as a two dimensional array\n"
    "Highcharts.Chart.prototype.getDataRows = function () {\n"
        "var options = (this.options.exporting || {}).csv || {},\n"
            "xAxis = this.xAxis[0],\n"
            "rows = {},\n"
            "rowArr = [],\n"
            "dataRows,\n"
            "names = [],\n"
            "i,\n"
            "x,\n"
            "xTitle = xAxis.options.title && xAxis.options.title.text,\n"
             // Options\n"
            "dateFormat = options.dateFormat || '%Y-%m-%d %H:%M:%S',\n"
            "columnHeaderFormatter = options.columnHeaderFormatter || function (series, key, keyLength) {\n"
                "return series.name + (keyLength > 1 ? ' ('+ key + ')' : '');\n"
            "};\n"
         // Loop the series and index values\n"
        "i = 0;\n"
        "each(this.series, function (series) {\n"
            "var keys = series.options.keys,\n"
                "pointArrayMap = keys || series.pointArrayMap || ['y'],\n"
                "valueCount = pointArrayMap.length,\n"
                "requireSorting = series.requireSorting,\n"
                "categoryMap = {},\n"
                "j;\n"
             // Map the categories for value axes\n"
            "each(pointArrayMap, function (prop) {\n"
                "categoryMap[prop] = (series[prop + 'Axis'] && series[prop + 'Axis'].categories) || [];\n"
            "});\n"
            "if (series.options.includeInCSVExport !== false && series.visible !== false) { // #55\n"
                "j = 0;\n"
                "while (j < valueCount) {\n"
                    "names.push(columnHeaderFormatter(series, pointArrayMap[j], pointArrayMap.length));\n"
                    "j = j + 1;\n"
                "}\n"
                "each(series.points, function (point, pIdx) {\n"
                    "var key = requireSorting ? point.x : pIdx,\n"
                        "prop,\n"
                        "val;\n"
                    "j = 0;\n"
                    "if (!rows[key]) {\n"
                        "rows[key] = [];\n"
                    "}\n"
                    "rows[key].x = point.x;\n"
                     // Pies, funnels etc. use point name in X row\n"
                    "if (!series.xAxis) {\n"
                        "rows[key].name = point.name;\n"
                    "}\n"
                    "while (j < valueCount) {\n"
                        "prop = pointArrayMap[j];\n"
                        "val = point[prop];\n"
                        "rows[key][i + j] = pick(categoryMap[prop][val], val);\n"
                        "j = j + 1;\n"
                    "}\n"
                "});\n"
                "i = i + j;\n"
            "}\n"
        "});\n"
         // Make a sortable array\n"
        "for (x in rows) {\n"
            "if (rows.hasOwnProperty(x)) {\n"
                "rowArr.push(rows[x]);\n"
            "}\n"
        "}\n"
         // Sort it by X values\n"
        "rowArr.sort(function (a, b) {\n"
            "return a.x - b.x;\n"
        "});\n"
         // Add header row\n"
        "if (!xTitle) {\n"
            "xTitle = xAxis.isDatetimeAxis ? '时间' : '分类';\n"
        "}\n"
        "dataRows = [[xTitle].concat(names)];\n"
         // Transform the rows to CSV\n"
        "each(rowArr, function (row) {\n"
            "var category = row.name;\n"
            "if (!category) {\n"
                "if (xAxis.isDatetimeAxis) {\n"
                    "category = Highcharts.dateFormat(dateFormat, row.x);\n"
                "} else if (xAxis.categories) {\n"
                    "category = pick(xAxis.names[row.x], xAxis.categories[row.x], row.x)\n"
                "} else {\n"
                    "category = row.x;\n"
                "}\n"
            "}\n"
             // Add the X/date/category\n"
            "row.unshift(category);\n"
            "dataRows.push(row);\n"
        "});\n"
        "return dataRows;\n"
    "};\n"
     // * Get a CSV string\n"
    "Highcharts.Chart.prototype.getCSV = function (useLocalDecimalPoint) {\n"
        "var csv = '',\n"
            "rows = this.getDataRows(),\n"
            "options = (this.options.exporting || {}).csv || {},\n"
            "itemDelimiter = options.itemDelimiter || ',', \n"
            "lineDelimiter = options.lineDelimiter || '\\n';\n"
         // Transform the rows to CSV\n"
        "each(rows, function (row, i) {\n"
            "var val = '',\n"
                "j = row.length,\n"
                "n = useLocalDecimalPoint ? (1.1).toLocaleString()[1] : '.';\n"
            "while (j--) {\n"
                "val = row[j];\n"
                "if (typeof val === \"string\") {\n"
                    "val = '\"' + val + '\"';\n"
                "}\n"
                "if (typeof val === 'number') {\n"
                    "if (n === ',') {\n"
                        "val = val.toString().replace(\".\", \",\");\n"
                    "}\n"
                "}\n"
                "row[j] = val;\n"
            "}\n"
             // Add the values\n"
            "csv += row.join(itemDelimiter);\n"
             // Add the line delimiter\n"
            "if (i < rows.length - 1) {\n"
                "csv += lineDelimiter;\n"
            "}\n"
        "});\n"
        "return csv;\n"
    "};\n"
     // * Build a HTML table with the data\n"
    "Highcharts.Chart.prototype.getTable = function (useLocalDecimalPoint) {\n"
        "var html = '<table>',\n"
            "rows = this.getDataRows();\n"
         // Transform the rows to HTML\n"
        "each(rows, function (row, i) {\n"
            "var tag = i ? 'td' : 'th',\n"
                "val,\n"
                "j,\n"
                "n = useLocalDecimalPoint ? (1.1).toLocaleString()[1] : '.';\n"
            "html += '<tr>';\n"
            "for (j = 0; j < row.length; j = j + 1) {\n"
                "val = row[j];\n"
                 // Add the cell\n"
                "if (typeof val === 'number') {\n"
                    "val = val.toString();\n"
                    "if (n === ',') {\n"
                        "val = val.replace('.', n);\n"
                    "}\n"
                    "html += '<' + tag + ' class=\"number\">' + val + '</' + tag + '>';\n"
                "} else {\n"
                    "html += '<' + tag + '>' + (val === undefined ? '' : val) + '</' + tag + '>';\n"
                "}\n"
            "}\n"
            "html += '</tr>';\n"
        "});\n"
        "html += '</table>';\n"
        "return html;\n"
    "};\n"
    "function getContent(chart, href, extension, content, MIME) {\n"
        "console.log(href);\n"
        "console.log(content);\n"
        "console.log(MIME);\n"
        "var a,\n"
            "blobObject,\n"
            "name,\n"
            "options = (chart.options.exporting || {}).csv || {},\n"
             // change export csv server url to fixed Chinese char\n"
            "url = options.url || 'http://export.hcharts.cn/csv.php';\n"
        "if (chart.options.exporting.filename) {\n"
            "name = chart.options.exporting.filename;\n"
        "} else if (chart.title) {\n"
            "name = chart.title.textStr.replace(/ /g, '-').toLowerCase();\n"
        "} else {\n"
            "name = 'chart';\n"
        "}\n"
         // MS specific. Check this first because of bug with Edge (#76)\n"
        "if (window.Blob && window.navigator.msSaveOrOpenBlob) {\n"
             // Falls to msSaveOrOpenBlob if download attribute is not supported\n"
            "blobObject = new Blob([content]);\n"
            "window.navigator.msSaveOrOpenBlob(blobObject, name + '.' + extension);\n"
         // Download attribute supported\n"
        "} else if (downloadAttrSupported) {\n"
            "a = document.createElement('a');\n"
            "a.href = href;\n"
            "a.target = '_blank';\n"
            "a.download = name + '.' + extension;\n"
            "document.body.appendChild(a);\n"
            "a.click();\n"
            "a.remove();\n"
        "} else {\n"
             // Fall back to server side handling\n"
            "Highcharts.post(url, {\n"
                "data: content,\n"
                "type: MIME,\n"
                "extension: extension\n"
            "});\n"
        "}\n"
    "}\n"
     // * Call this on click of 'Download CSV' button\n"
    "Highcharts.Chart.prototype.downloadCSV = function () {\n"
        "var csv = this.getCSV(true);\n"
        "getContent(\n"
            "this,\n"
             // add \\ufeff to Fixed Chinese in csv file\n"
            "'data:text/csv,\\ufeff' + csv.replace(/\\n/g, '%0A'),\n"
            "'csv',\n"
            "csv,\n"
            "'text/csv'\n"
        ");\n"
    "};\n"
     // * Call this on click of 'Download XLS' button\n"
    "Highcharts.Chart.prototype.downloadXLS = function () {\n"
        "var uri = 'data:application/vnd.ms-excel;base64,',\n"
            "template = '<html xmlns:o=\"urn:schemas-microsoft-com:office:office\" xmlns:x=\"urn:schemas-microsoft-com:office:excel\" xmlns=\"http://www.w3.org/TR/REC-html40\">' +\n"
                 // add charset meta to fixed Chinese char in XLS file\n"
                "'<meta http-equiv=\"Content-Type\" charset=utf-8\">'+\n"
                "'<head><!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:ExcelWorksheet>' +\n"
                "'<x:Name>Ark1</x:Name>' +\n"
                "'<x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]-->' +\n"
                "'<style>td{border:none;font-family: Calibri, sans-serif;} .number{mso-number-format:\"0.00\";}</style>' +\n"
                "'<meta name=ProgId content=Excel.Sheet>' +\n"
                "'</head><body>' +\n"
                "this.getTable(true) +\n"
                "'</body></html>',\n"
            "base64 = function (s) {\n"
                "return window.btoa(unescape(encodeURIComponent(s))); // #50\n"
            "};\n"
        "getContent(\n"
            "this,\n"
            "uri + base64(template),\n"
            "'xls',\n"
            "template,\n"
            "'application/vnd.ms-excel'\n"
        ");\n"
    "};\n"
     // Add \"Download CSV\" to the exporting menu. Use download attribute if supported, else\n"
     // run a simple PHP script that returns a file. The source code for the PHP script can be viewed at\n"
     // https://raw.github.com/highslide-software/highcharts.com/master/studies/csv-export/csv.php\n"
    "if (Highcharts.getOptions().exporting) {\n"
        "Highcharts.getOptions().exporting.buttons.contextButton.menuItems.push({\n"
            "textKey: 'downloadCSV',\n"
            "onclick: function () { this.downloadCSV(); }\n"
        "}, {\n"
            "textKey: 'downloadXLS',\n"
            "onclick: function () { this.downloadXLS(); }\n"
        "});\n"
    "}\n"
"});\n"
};
#endif
