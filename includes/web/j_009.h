#ifndef _J_009_H_
#define _J_009_H_

static const char j_009[]={
"HTTP/1.1 200 OK\r\nContent-Type:text/javascript\r\nAccept-Ranges:bytes\r\n\r\n"
 // A class to parse color values\n"
 // @author Stoyan Stefanov <sstoo@gmail.com>\n"
 // @link   http://www.phpied.com/rgb-color-parser-in-javascript/\n"
 // Use it if you like it\n"
 // canvg.js - Javascript SVG parser and renderer on Canvas\n"
 // MIT Licensed \n"
 // Gabe Lerner (gabelerner@gmail.com)\n"
 // http://code.google.com/p/canvg/\n"
 // Requires: rgbcolor.js - http://www.phpied.com/rgb-color-parser-in-javascript/\n"
 // Highcharts JS v4.1.4 (2015-03-10)\n"
 // CanVGRenderer Extension module\n"
 // (c) 2011-2012 Torstein Honsi, Erik Olsson\n"
 // License: www.highcharts.com/license\n"
"function RGBColor(m) {\n"
    "this.ok = !1;\n"
    "m.charAt(0) == \"#\" && (m = m.substr(1, 6));\n"
    "var m = m.replace(/ /g, \"\"),\n"
    "m = m.toLowerCase(),\n"
    "a = {\n"
        "aliceblue: \"f0f8ff\",\n"
        "antiquewhite: \"faebd7\",\n"
        "aqua: \"00ffff\",\n"
        "aquamarine: \"7fffd4\",\n"
        "azure: \"f0ffff\",\n"
        "beige: \"f5f5dc\",\n"
        "bisque: \"ffe4c4\",\n"
        "black: \"000000\",\n"
        "blanchedalmond: \"ffebcd\",\n"
        "blue: \"0000ff\",\n"
        "blueviolet: \"8a2be2\",\n"
        "brown: \"a52a2a\",\n"
        "burlywood: \"deb887\",\n"
        "cadetblue: \"5f9ea0\",\n"
        "chartreuse: \"7fff00\",\n"
        "chocolate: \"d2691e\",\n"
        "coral: \"ff7f50\",\n"
        "cornflowerblue: \"6495ed\",\n"
        "cornsilk: \"fff8dc\",\n"
        "crimson: \"dc143c\",\n"
        "cyan: \"00ffff\",\n"
        "darkblue: \"00008b\",\n"
        "darkcyan: \"008b8b\",\n"
        "darkgoldenrod: \"b8860b\",\n"
        "darkgray: \"a9a9a9\",\n"
        "darkgreen: \"006400\",\n"
        "darkkhaki: \"bdb76b\",\n"
        "darkmagenta: \"8b008b\",\n"
        "darkolivegreen: \"556b2f\",\n"
        "darkorange: \"ff8c00\",\n"
        "darkorchid: \"9932cc\",\n"
        "darkred: \"8b0000\",\n"
        "darksalmon: \"e9967a\",\n"
        "darkseagreen: \"8fbc8f\",\n"
        "darkslateblue: \"483d8b\",\n"
        "darkslategray: \"2f4f4f\",\n"
        "darkturquoise: \"00ced1\",\n"
        "darkviolet: \"9400d3\",\n"
        "deeppink: \"ff1493\",\n"
        "deepskyblue: \"00bfff\",\n"
        "dimgray: \"696969\",\n"
        "dodgerblue: \"1e90ff\",\n"
        "feldspar: \"d19275\",\n"
        "firebrick: \"b22222\",\n"
        "floralwhite: \"fffaf0\",\n"
        "forestgreen: \"228b22\",\n"
        "fuchsia: \"ff00ff\",\n"
        "gainsboro: \"dcdcdc\",\n"
        "ghostwhite: \"f8f8ff\",\n"
        "gold: \"ffd700\",\n"
        "goldenrod: \"daa520\",\n"
        "gray: \"808080\",\n"
        "green: \"008000\",\n"
        "greenyellow: \"adff2f\",\n"
        "honeydew: \"f0fff0\",\n"
        "hotpink: \"ff69b4\",\n"
        "indianred: \"cd5c5c\",\n"
        "indigo: \"4b0082\",\n"
        "ivory: \"fffff0\",\n"
        "khaki: \"f0e68c\",\n"
        "lavender: \"e6e6fa\",\n"
        "lavenderblush: \"fff0f5\",\n"
        "lawngreen: \"7cfc00\",\n"
        "lemonchiffon: \"fffacd\",\n"
        "lightblue: \"add8e6\",\n"
        "lightcoral: \"f08080\",\n"
        "lightcyan: \"e0ffff\",\n"
        "lightgoldenrodyellow: \"fafad2\",\n"
        "lightgrey: \"d3d3d3\",\n"
        "lightgreen: \"90ee90\",\n"
        "lightpink: \"ffb6c1\",\n"
        "lightsalmon: \"ffa07a\",\n"
        "lightseagreen: \"20b2aa\",\n"
        "lightskyblue: \"87cefa\",\n"
        "lightslateblue: \"8470ff\",\n"
        "lightslategray: \"778899\",\n"
        "lightsteelblue: \"b0c4de\",\n"
        "lightyellow: \"ffffe0\",\n"
        "lime: \"00ff00\",\n"
        "limegreen: \"32cd32\",\n"
        "linen: \"faf0e6\",\n"
        "magenta: \"ff00ff\",\n"
        "maroon: \"800000\",\n"
        "mediumaquamarine: \"66cdaa\",\n"
        "mediumblue: \"0000cd\",\n"
        "mediumorchid: \"ba55d3\",\n"
        "mediumpurple: \"9370d8\",\n"
        "mediumseagreen: \"3cb371\",\n"
        "mediumslateblue: \"7b68ee\",\n"
        "mediumspringgreen: \"00fa9a\",\n"
        "mediumturquoise: \"48d1cc\",\n"
        "mediumvioletred: \"c71585\",\n"
        "midnightblue: \"191970\",\n"
        "mintcream: \"f5fffa\",\n"
        "mistyrose: \"ffe4e1\",\n"
        "moccasin: \"ffe4b5\",\n"
        "navajowhite: \"ffdead\",\n"
        "navy: \"000080\",\n"
        "oldlace: \"fdf5e6\",\n"
        "olive: \"808000\",\n"
        "olivedrab: \"6b8e23\",\n"
        "orange: \"ffa500\",\n"
        "orangered: \"ff4500\",\n"
        "orchid: \"da70d6\",\n"
        "palegoldenrod: \"eee8aa\",\n"
        "palegreen: \"98fb98\",\n"
        "paleturquoise: \"afeeee\",\n"
        "palevioletred: \"d87093\",\n"
        "papayawhip: \"ffefd5\",\n"
        "peachpuff: \"ffdab9\",\n"
        "peru: \"cd853f\",\n"
        "pink: \"ffc0cb\",\n"
        "plum: \"dda0dd\",\n"
        "powderblue: \"b0e0e6\",\n"
        "purple: \"800080\",\n"
        "red: \"ff0000\",\n"
        "rosybrown: \"bc8f8f\",\n"
        "royalblue: \"4169e1\",\n"
        "saddlebrown: \"8b4513\",\n"
        "salmon: \"fa8072\",\n"
        "sandybrown: \"f4a460\",\n"
        "seagreen: \"2e8b57\",\n"
        "seashell: \"fff5ee\",\n"
        "sienna: \"a0522d\",\n"
        "silver: \"c0c0c0\",\n"
        "skyblue: \"87ceeb\",\n"
        "slateblue: \"6a5acd\",\n"
        "slategray: \"708090\",\n"
        "snow: \"fffafa\",\n"
        "springgreen: \"00ff7f\",\n"
        "steelblue: \"4682b4\",\n"
        "tan: \"d2b48c\",\n"
        "teal: \"008080\",\n"
        "thistle: \"d8bfd8\",\n"
        "tomato: \"ff6347\",\n"
        "turquoise: \"40e0d0\",\n"
        "violet: \"ee82ee\",\n"
        "violetred: \"d02090\",\n"
        "wheat: \"f5deb3\",\n"
        "white: \"ffffff\",\n"
        "whitesmoke: \"f5f5f5\",\n"
        "yellow: \"ffff00\",\n"
        "yellowgreen: \"9acd32\"\n"
    "},\n"
    "c;\n"
    "for (c in a) m == c && (m = a[c]);\n"
    "var d = [{\n"
        "re: /^rgb\\((\\d{1,3}),\\s*(\\d{1,3}),\\s*(\\d{1,3})\\)$/,\n"
        "example: [\"rgb(123, 234, 45)\", \"rgb(255,234,245)\"],\n"
        "process: function(b) {\n"
            "return [parseInt(b[1]), parseInt(b[2]), parseInt(b[3])]\n"
        "}\n"
    "},\n"
    "{\n"
        "re: /^(\\w{2})(\\w{2})(\\w{2})$/,\n"
        "example: [\"#00ff00\", \"336699\"],\n"
        "process: function(b) {\n"
            "return [parseInt(b[1], 16), parseInt(b[2], 16), parseInt(b[3], 16)]\n"
        "}\n"
    "},\n"
    "{\n"
        "re: /^(\\w{1})(\\w{1})(\\w{1})$/,\n"
        "example: [\"#fb0\", \"f0f\"],\n"
        "process: function(b) {\n"
            "return [parseInt(b[1] + b[1], 16), parseInt(b[2] + b[2], 16), parseInt(b[3] + b[3], 16)]\n"
        "}\n"
    "}];\n"
    "for (c = 0; c < d.length; c++) {\n"
        "var b = d[c].process,\n"
        "k = d[c].re.exec(m);\n"
        "if (k) channels = b(k),\n"
        "this.r = channels[0],\n"
        "this.g = channels[1],\n"
        "this.b = channels[2],\n"
        "this.ok = !0\n"
    "}\n"
    "this.r = this.r < 0 || isNaN(this.r) ? 0 : this.r > 255 ? 255 : this.r;\n"
    "this.g = this.g < 0 || isNaN(this.g) ? 0 : this.g > 255 ? 255 : this.g;\n"
    "this.b = this.b < 0 || isNaN(this.b) ? 0 : this.b > 255 ? 255 : this.b;\n"
    "this.toRGB = function() {\n"
        "return \"rgb(\" + this.r + \", \" + this.g + \", \" + this.b + \")\"\n"
    "};\n"
    "this.toHex = function() {\n"
        "var b = this.r.toString(16),\n"
        "a = this.g.toString(16),\n"
        "d = this.b.toString(16);\n"
        "b.length == 1 && (b = \"0\" + b);\n"
        "a.length == 1 && (a = \"0\" + a);\n"
        "d.length == 1 && (d = \"0\" + d);\n"
        "return \"#\" + b + a + d\n"
    "};\n"
    "this.getHelpXML = function() {\n"
        "for (var b = [], k = 0; k < d.length; k++) for (var c = d[k].example, j = 0; j < c.length; j++) b[b.length] = c[j];\n"
        "for (var h in a) b[b.length] = h;\n"
        "c = document.createElement(\"ul\");\n"
        "c.setAttribute(\"id\", \"rgbcolor-examples\");\n"
        "for (k = 0; k < b.length; k++) try {\n"
            "var l = document.createElement(\"li\"),\n"
            "o = new RGBColor(b[k]),\n"
            "n = document.createElement(\"div\");\n"
            "n.style.cssText = \"margin: 3px; border: 1px solid black; background:\" + o.toHex() + \"; color:\" + o.toHex();\n"
            "n.appendChild(document.createTextNode(\"test\"));\n"
            "var q = document.createTextNode(\" \" + b[k] + \" -> \" + o.toRGB() + \" -> \" + o.toHex());\n"
            "l.appendChild(n);\n"
            "l.appendChild(q);\n"
            "c.appendChild(l)\n"
        "} catch(p) {}\n"
        "return c\n"
    "}\n"
"}\n"
"if (!window.console) window.console = {},\n"
"window.console.log = function() {},\n"
"window.console.dir = function() {};\n"
"if (!Array.prototype.indexOf) Array.prototype.indexOf = function(m) {\n"
    "for (var a = 0; a < this.length; a++) if (this[a] == m) return a;\n"
    "return - 1\n"
"}; (function() {\n"
    "function m() {\n"
        "var a = {\n"
            "FRAMERATE: 30,\n"
            "MAX_VIRTUAL_PIXELS: 3E4\n"
        "};\n"
        "a.init = function(c) {\n"
            "a.Definitions = {};\n"
            "a.Styles = {};\n"
            "a.Animations = [];\n"
            "a.Images = [];\n"
            "a.ctx = c;\n"
            "a.ViewPort = new\n"
            "function() {\n"
                "this.viewPorts = [];\n"
                "this.Clear = function() {\n"
                    "this.viewPorts = []\n"
                "};\n"
                "this.SetCurrent = function(a, b) {\n"
                    "this.viewPorts.push({\n"
                        "width: a,\n"
                        "height: b\n"
                    "})\n"
                "};\n"
                "this.RemoveCurrent = function() {\n"
                    "this.viewPorts.pop()\n"
                "};\n"
                "this.Current = function() {\n"
                    "return this.viewPorts[this.viewPorts.length - 1]\n"
                "};\n"
                "this.width = function() {\n"
                    "return this.Current().width\n"
                "};\n"
                "this.height = function() {\n"
                    "return this.Current().height\n"
                "};\n"
                "this.ComputeSize = function(a) {\n"
                    "return a != null && typeof a == \"number\" ? a: a == \"x\" ? this.width() : a == \"y\" ? this.height() : Math.sqrt(Math.pow(this.width(), 2) + Math.pow(this.height(), 2)) / Math.sqrt(2)\n"
                "}\n"
            "}\n"
        "};\n"
        "a.init();\n"
        "a.ImagesLoaded = function() {\n"
            "for (var c = 0; c < a.Images.length; c++) if (!a.Images[c].loaded) return ! 1;\n"
            "return ! 0\n"
        "};\n"
        "a.trim = function(a) {\n"
            "return a.replace(/^\\s+|\\s+$/g, \"\")\n"
        "};\n"
        "a.compressSpaces = function(a) {\n"
            "return a.replace(/[\\s\\r\\t\\n]+/gm, \" \")\n"
        "};\n"
        "a.ajax = function(a) {\n"
            "var d;\n"
            "return (d = window.XMLHttpRequest ? new XMLHttpRequest: new ActiveXObject(\"Microsoft.XMLHTTP\")) ? (d.open(\"GET\", a, !1), d.send(null), d.responseText) : null\n"
        "};\n"
        "a.parseXml = function(a) {\n"
            "if (window.DOMParser) return (new DOMParser).parseFromString(a, \"text/xml\");\n"
            "else {\n"
                "var a = a.replace(/<!DOCTYPE svg[^>]*>/, \"\"),\n"
                "d = new ActiveXObject(\"Microsoft.XMLDOM\");\n"
                "d.async = \"false\";\n"
                "d.loadXML(a);\n"
                "return d\n"
            "}\n"
        "};\n"
        "a.Property = function(c, d) {\n"
            "this.name = c;\n"
            "this.value = d;\n"
            "this.hasValue = function() {\n"
                "return this.value != null && this.value !== \"\"\n"
            "};\n"
            "this.numValue = function() {\n"
                "if (!this.hasValue()) return 0;\n"
                "var b = parseFloat(this.value); (this.value + \"\").match(/%$/) && (b /= 100);\n"
                "return b\n"
            "};\n"
            "this.valueOrDefault = function(b) {\n"
                "return this.hasValue() ? this.value: b\n"
            "};\n"
            "this.numValueOrDefault = function(b) {\n"
                "return this.hasValue() ? this.numValue() : b\n"
            "};\n"
            "var b = this;\n"
            "this.Color = {\n"
                "addOpacity: function(d) {\n"
                    "var c = b.value;\n"
                    "if (d != null && d != \"\") {\n"
                        "var f = new RGBColor(b.value);\n"
                        "f.ok && (c = \"rgba(\" + f.r + \", \" + f.g + \", \" + f.b + \", \" + d + \")\")\n"
                    "}\n"
                    "return new a.Property(b.name, c)\n"
                "}\n"
            "};\n"
            "this.Definition = {\n"
                "getDefinition: function() {\n"
                    "var d = b.value.replace(/^(url\\()?#([^\\)]+)\\)?$/, \"$2\");\n"
                    "return a.Definitions[d]\n"
                "},\n"
                "isUrl: function() {\n"
                    "return b.value.indexOf(\"url(\") == 0\n"
                "},\n"
                "getFillStyle: function(b) {\n"
                    "var d = this.getDefinition();\n"
                    "return d != null && d.createGradient ? d.createGradient(a.ctx, b) : d != null && d.createPattern ? d.createPattern(a.ctx, b) : null\n"
                "}\n"
            "};\n"
            "this.Length = {\n"
                "DPI: function() {\n"
                    "return 96\n"
                "},\n"
                "EM: function(b) {\n"
                    "var d = 12,\n"
                    "c = new a.Property(\"fontSize\", a.Font.Parse(a.ctx.font).fontSize);\n"
                    "c.hasValue() && (d = c.Length.toPixels(b));\n"
                    "return d\n"
                "},\n"
                "toPixels: function(d) {\n"
                    "if (!b.hasValue()) return 0;\n"
                    "var c = b.value + \"\";\n"
                    "return c.match(/em$/) ? b.numValue() * this.EM(d) : c.match(/ex$/) ? b.numValue() * this.EM(d) / 2 : c.match(/px$/) ? b.numValue() : c.match(/pt$/) ? b.numValue() * 1.25 : c.match(/pc$/) ? b.numValue() * 15 : c.match(/cm$/) ? b.numValue() * this.DPI(d) / 2.54 : c.match(/mm$/) ? b.numValue() * this.DPI(d) / 25.4 : c.match(/in$/) ? b.numValue() * this.DPI(d) : c.match(/%$/) ? b.numValue() * a.ViewPort.ComputeSize(d) : b.numValue()\n"
                "}\n"
            "};\n"
            "this.Time = {\n"
                "toMilliseconds: function() {\n"
                    "if (!b.hasValue()) return 0;\n"
                    "var a = b.value + \"\";\n"
                    "if (a.match(/s$/)) return b.numValue() * 1E3;\n"
                    "a.match(/ms$/);\n"
                    "return b.numValue()\n"
                "}\n"
            "};\n"
            "this.Angle = {\n"
                "toRadians: function() {\n"
                    "if (!b.hasValue()) return 0;\n"
                    "var a = b.value + \"\";\n"
                    "return a.match(/deg$/) ? b.numValue() * (Math.PI / 180) : a.match(/grad$/) ? b.numValue() * (Math.PI / 200) : a.match(/rad$/) ? b.numValue() : b.numValue() * (Math.PI / 180)\n"
                "}\n"
            "}\n"
        "};\n"
        "a.Font = new\n"
        "function() {\n"
            "this.Styles = [\"normal\", \"italic\", \"oblique\", \"inherit\"];\n"
            "this.Variants = [\"normal\", \"small-caps\", \"inherit\"];\n"
            "this.Weights = \"normal,bold,bolder,lighter,100,200,300,400,500,600,700,800,900,inherit\".split(\",\");\n"
            "this.CreateFont = function(d, b, c, e, f, g) {\n"
                "g = g != null ? this.Parse(g) : this.CreateFont(\"\", \"\", \"\", \"\", \"\", a.ctx.font);\n"
                "return {\n"
                    "fontFamily: f || g.fontFamily,\n"
                    "fontSize: e || g.fontSize,\n"
                    "fontStyle: d || g.fontStyle,\n"
                    "fontWeight: c || g.fontWeight,\n"
                    "fontVariant: b || g.fontVariant,\n"
                    "toString: function() {\n"
                        "return [this.fontStyle, this.fontVariant, this.fontWeight, this.fontSize, this.fontFamily].join(\" \")\n"
                    "}\n"
                "}\n"
            "};\n"
            "var c = this;\n"
            "this.Parse = function(d) {\n"
                "for (var b = {},\n"
                "d = a.trim(a.compressSpaces(d || \"\")).split(\" \"), k = !1, e = !1, f = !1, g = !1, j = \"\", h = 0; h < d.length; h++) if (!e && c.Styles.indexOf(d[h]) != -1) {\n"
                    "if (d[h] != \"inherit\") b.fontStyle = d[h];\n"
                    "e = !0\n"
                "} else if (!g && c.Variants.indexOf(d[h]) != -1) {\n"
                    "if (d[h] != \"inherit\") b.fontVariant = d[h];\n"
                    "e = g = !0\n"
                "} else if (!f && c.Weights.indexOf(d[h]) != -1) {\n"
                    "if (d[h] != \"inherit\") b.fontWeight = d[h];\n"
                    "e = g = f = !0\n"
                "} else if (k) d[h] != \"inherit\" && (j += d[h]);\n"
                "else {\n"
                    "if (d[h] != \"inherit\") b.fontSize = d[h].split(\"/\")[0];\n"
                    "e = g = f = k = !0\n"
                "}\n"
                "if (j != \"\") b.fontFamily = j;\n"
                "return b\n"
            "}\n"
        "};\n"
        "a.ToNumberArray = function(c) {\n"
            "for (var c = a.trim(a.compressSpaces((c || \"\").replace(/,/g, \" \"))).split(\" \"), d = 0; d < c.length; d++) c[d] = parseFloat(c[d]);\n"
            "return c\n"
        "};\n"
        "a.Point = function(a, d) {\n"
            "this.x = a;\n"
            "this.y = d;\n"
            "this.angleTo = function(b) {\n"
                "return Math.atan2(b.y - this.y, b.x - this.x)\n"
            "};\n"
            "this.applyTransform = function(b) {\n"
                "var a = this.x * b[1] + this.y * b[3] + b[5];\n"
                "this.x = this.x * b[0] + this.y * b[2] + b[4];\n"
                "this.y = a\n"
            "}\n"
        "};\n"
        "a.CreatePoint = function(c) {\n"
            "c = a.ToNumberArray(c);\n"
            "return new a.Point(c[0], c[1])\n"
        "};\n"
        "a.CreatePath = function(c) {\n"
            "for (var c = a.ToNumberArray(c), d = [], b = 0; b < c.length; b += 2) d.push(new a.Point(c[b], c[b + 1]));\n"
            "return d\n"
        "};\n"
        "a.BoundingBox = function(a, d, b, k) {\n"
            "this.y2 = this.x2 = this.y1 = this.x1 = Number.NaN;\n"
            "this.x = function() {\n"
                "return this.x1\n"
            "};\n"
            "this.y = function() {\n"
                "return this.y1\n"
            "};\n"
            "this.width = function() {\n"
                "return this.x2 - this.x1\n"
            "};\n"
            "this.height = function() {\n"
                "return this.y2 - this.y1\n"
            "};\n"
            "this.addPoint = function(b, a) {\n"
                "if (b != null) {\n"
                    "if (isNaN(this.x1) || isNaN(this.x2)) this.x2 = this.x1 = b;\n"
                    "if (b < this.x1) this.x1 = b;\n"
                    "if (b > this.x2) this.x2 = b\n"
                "}\n"
                "if (a != null) {\n"
                    "if (isNaN(this.y1) || isNaN(this.y2)) this.y2 = this.y1 = a;\n"
                    "if (a < this.y1) this.y1 = a;\n"
                    "if (a > this.y2) this.y2 = a\n"
                "}\n"
            "};\n"
            "this.addX = function(b) {\n"
                "this.addPoint(b, null)\n"
            "};\n"
            "this.addY = function(b) {\n"
                "this.addPoint(null, b)\n"
            "};\n"
            "this.addBoundingBox = function(b) {\n"
                "this.addPoint(b.x1, b.y1);\n"
                "this.addPoint(b.x2, b.y2)\n"
            "};\n"
            "this.addQuadraticCurve = function(b, a, d, c, k, l) {\n"
                "d = b + 2 / 3 * (d - b);\n"
                "c = a + 2 / 3 * (c - a);\n"
                "this.addBezierCurve(b, a, d, d + 1 / 3 * (k - b), c, c + 1 / 3 * (l - a), k, l)\n"
            "};\n"
            "this.addBezierCurve = function(b, a, d, c, k, l, o, n) {\n"
                "var q = [b, a],\n"
                "p = [d, c],\n"
                "t = [k, l],\n"
                "m = [o, n];\n"
                "this.addPoint(q[0], q[1]);\n"
                "this.addPoint(m[0], m[1]);\n"
                "for (i = 0; i <= 1; i++) b = function(b) {\n"
                    "return Math.pow(1 - b, 3) * q[i] + 3 * Math.pow(1 - b, 2) * b * p[i] + 3 * (1 - b) * Math.pow(b, 2) * t[i] + Math.pow(b, 3) * m[i]\n"
                "},\n"
                "a = 6 * q[i] - 12 * p[i] + 6 * t[i],\n"
                "d = -3 * q[i] + 9 * p[i] - 9 * t[i] + 3 * m[i],\n"
                "c = 3 * p[i] - 3 * q[i],\n"
                "d == 0 ? a != 0 && (a = -c / a, 0 < a && a < 1 && (i == 0 && this.addX(b(a)), i == 1 && this.addY(b(a)))) : (c = Math.pow(a, 2) - 4 * c * d, c < 0 || (k = ( - a + Math.sqrt(c)) / (2 * d), 0 < k && k < 1 && (i == 0 && this.addX(b(k)), i == 1 && this.addY(b(k))), a = ( - a - Math.sqrt(c)) / (2 * d), 0 < a && a < 1 && (i == 0 && this.addX(b(a)), i == 1 && this.addY(b(a)))))\n"
            "};\n"
            "this.isPointInBox = function(b, a) {\n"
                "return this.x1 <= b && b <= this.x2 && this.y1 <= a && a <= this.y2\n"
            "};\n"
            "this.addPoint(a, d);\n"
            "this.addPoint(b, k)\n"
        "};\n"
        "a.Transform = function(c) {\n"
            "var d = this;\n"
            "this.Type = {};\n"
            "this.Type.translate = function(b) {\n"
                "this.p = a.CreatePoint(b);\n"
                "this.apply = function(b) {\n"
                    "b.translate(this.p.x || 0, this.p.y || 0)\n"
                "};\n"
                "this.applyToPoint = function(b) {\n"
                    "b.applyTransform([1, 0, 0, 1, this.p.x || 0, this.p.y || 0])\n"
                "}\n"
            "};\n"
            "this.Type.rotate = function(b) {\n"
                "b = a.ToNumberArray(b);\n"
                "this.angle = new a.Property(\"angle\", b[0]);\n"
                "this.cx = b[1] || 0;\n"
                "this.cy = b[2] || 0;\n"
                "this.apply = function(b) {\n"
                    "b.translate(this.cx, this.cy);\n"
                    "b.rotate(this.angle.Angle.toRadians());\n"
                    "b.translate( - this.cx, -this.cy)\n"
                "};\n"
                "this.applyToPoint = function(b) {\n"
                    "var a = this.angle.Angle.toRadians();\n"
                    "b.applyTransform([1, 0, 0, 1, this.p.x || 0, this.p.y || 0]);\n"
                    "b.applyTransform([Math.cos(a), Math.sin(a), -Math.sin(a), Math.cos(a), 0, 0]);\n"
                    "b.applyTransform([1, 0, 0, 1, -this.p.x || 0, -this.p.y || 0])\n"
                "}\n"
            "};\n"
            "this.Type.scale = function(b) {\n"
                "this.p = a.CreatePoint(b);\n"
                "this.apply = function(b) {\n"
                    "b.scale(this.p.x || 1, this.p.y || this.p.x || 1)\n"
                "};\n"
                "this.applyToPoint = function(b) {\n"
                    "b.applyTransform([this.p.x || 0, 0, 0, this.p.y || 0, 0, 0])\n"
                "}\n"
            "};\n"
            "this.Type.matrix = function(b) {\n"
                "this.m = a.ToNumberArray(b);\n"
                "this.apply = function(b) {\n"
                    "b.transform(this.m[0], this.m[1], this.m[2], this.m[3], this.m[4], this.m[5])\n"
                "};\n"
                "this.applyToPoint = function(b) {\n"
                    "b.applyTransform(this.m)\n"
                "}\n"
            "};\n"
            "this.Type.SkewBase = function(b) {\n"
                "this.base = d.Type.matrix;\n"
                "this.base(b);\n"
                "this.angle = new a.Property(\"angle\", b)\n"
            "};\n"
            "this.Type.SkewBase.prototype = new this.Type.matrix;\n"
            "this.Type.skewX = function(b) {\n"
                "this.base = d.Type.SkewBase;\n"
                "this.base(b);\n"
                "this.m = [1, 0, Math.tan(this.angle.Angle.toRadians()), 1, 0, 0]\n"
            "};\n"
            "this.Type.skewX.prototype = new this.Type.SkewBase;\n"
            "this.Type.skewY = function(b) {\n"
                "this.base = d.Type.SkewBase;\n"
                "this.base(b);\n"
                "this.m = [1, Math.tan(this.angle.Angle.toRadians()), 0, 1, 0, 0]\n"
            "};\n"
            "this.Type.skewY.prototype = new this.Type.SkewBase;\n"
            "this.transforms = [];\n"
            "this.apply = function(b) {\n"
                "for (var a = 0; a < this.transforms.length; a++) this.transforms[a].apply(b)\n"
            "};\n"
            "this.applyToPoint = function(b) {\n"
                "for (var a = 0; a < this.transforms.length; a++) this.transforms[a].applyToPoint(b)\n"
            "};\n"
            "for (var c = a.trim(a.compressSpaces(c)).split(/\\s(?=[a-z])/), b = 0; b < c.length; b++) {\n"
                "var k = c[b].split(\"(\")[0],\n"
                "e = c[b].split(\"(\")[1].replace(\")\", \"\");\n"
                "this.transforms.push(new this.Type[k](e))\n"
            "}\n"
        "};\n"
        "a.AspectRatio = function(c, d, b, k, e, f, g, j, h, l) {\n"
            "var d = a.compressSpaces(d),\n"
            "d = d.replace(/^defer\\s/, \"\"),\n"
            "o = d.split(\" \")[0] || \"xMidYMid\",\n"
            "d = d.split(\" \")[1] || \"meet\",\n"
            "n = b / k,\n"
            "q = e / f,\n"
            "p = Math.min(n, q),\n"
            "m = Math.max(n, q);\n"
            "d == \"meet\" && (k *= p, f *= p);\n"
            "d == \"slice\" && (k *= m, f *= m);\n"
            "h = new a.Property(\"refX\", h);\n"
            "l = new a.Property(\"refY\", l);\n"
            "h.hasValue() && l.hasValue() ? c.translate( - p * h.Length.toPixels(\"x\"), -p * l.Length.toPixels(\"y\")) : (o.match(/^xMid/) && (d == \"meet\" && p == q || d == \"slice\" && m == q) && c.translate(b / 2 - k / 2, 0), o.match(/YMid$/) && (d == \"meet\" && p == n || d == \"slice\" && m == n) && c.translate(0, e / 2 - f / 2), o.match(/^xMax/) && (d == \"meet\" && p == q || d == \"slice\" && m == q) && c.translate(b - k, 0), o.match(/YMax$/) && (d == \"meet\" && p == n || d == \"slice\" && m == n) && c.translate(0, e - f));\n"
            "o == \"none\" ? c.scale(n, q) : d == \"meet\" ? c.scale(p, p) : d == \"slice\" && c.scale(m, m);\n"
            "c.translate(g == null ? 0 : -g, j == null ? 0 : -j)\n"
        "};\n"
        "a.Element = {};\n"
        "a.Element.ElementBase = function(c) {\n"
            "this.attributes = {};\n"
            "this.styles = {};\n"
            "this.children = [];\n"
            "this.attribute = function(b, d) {\n"
                "var c = this.attributes[b];\n"
                "if (c != null) return c;\n"
                "c = new a.Property(b, \"\");\n"
                "d == !0 && (this.attributes[b] = c);\n"
                "return c\n"
            "};\n"
            "this.style = function(b, d) {\n"
                "var c = this.styles[b];\n"
                "if (c != null) return c;\n"
                "c = this.attribute(b);\n"
                "if (c != null && c.hasValue()) return c;\n"
                "c = this.parent;\n"
                "if (c != null && (c = c.style(b), c != null && c.hasValue())) return c;\n"
                "c = new a.Property(b, \"\");\n"
                "d == !0 && (this.styles[b] = c);\n"
                "return c\n"
            "};\n"
            "this.render = function(b) {\n"
                "if (this.style(\"display\").value != \"none\" && this.attribute(\"visibility\").value != \"hidden\") {\n"
                    "b.save();\n"
                    "this.setContext(b);\n"
                    "if (this.attribute(\"mask\").hasValue()) {\n"
                        "var a = this.attribute(\"mask\").Definition.getDefinition();\n"
                        "a != null && a.apply(b, this)\n"
                    "} else this.style(\"filter\").hasValue() ? (a = this.style(\"filter\").Definition.getDefinition(), a != null && a.apply(b, this)) : this.renderChildren(b);\n"
                    "this.clearContext(b);\n"
                    "b.restore()\n"
                "}\n"
            "};\n"
            "this.setContext = function() {};\n"
            "this.clearContext = function() {};\n"
            "this.renderChildren = function(b) {\n"
                "for (var a = 0; a < this.children.length; a++) this.children[a].render(b)\n"
            "};\n"
            "this.addChild = function(b, d) {\n"
                "var c = b;\n"
                "d && (c = a.CreateElement(b));\n"
                "c.parent = this;\n"
                "this.children.push(c)\n"
            "};\n"
            "if (c != null && c.nodeType == 1) {\n"
                "for (var d = 0; d < c.childNodes.length; d++) {\n"
                    "var b = c.childNodes[d];\n"
                    "b.nodeType == 1 && this.addChild(b, !0)\n"
                "}\n"
                "for (d = 0; d < c.attributes.length; d++) b = c.attributes[d],\n"
                "this.attributes[b.nodeName] = new a.Property(b.nodeName, b.nodeValue);\n"
                "b = a.Styles[c.nodeName];\n"
                "if (b != null) for (var k in b) this.styles[k] = b[k];\n"
                "if (this.attribute(\"class\").hasValue()) for (var d = a.compressSpaces(this.attribute(\"class\").value).split(\" \"), e = 0; e < d.length; e++) {\n"
                    "b = a.Styles[\".\" + d[e]];\n"
                    "if (b != null) for (k in b) this.styles[k] = b[k];\n"
                    "b = a.Styles[c.nodeName + \".\" + d[e]];\n"
                    "if (b != null) for (k in b) this.styles[k] = b[k]\n"
                "}\n"
                "if (this.attribute(\"style\").hasValue()) {\n"
                    "b = this.attribute(\"style\").value.split(\";\");\n"
                    "for (d = 0; d < b.length; d++) a.trim(b[d]) != \"\" && (c = b[d].split(\":\"), k = a.trim(c[0]), c = a.trim(c[1]), this.styles[k] = new a.Property(k, c))\n"
                "}\n"
                "this.attribute(\"id\").hasValue() && a.Definitions[this.attribute(\"id\").value] == null && (a.Definitions[this.attribute(\"id\").value] = this)\n"
            "}\n"
        "};\n"
        "a.Element.RenderedElementBase = function(c) {\n"
            "this.base = a.Element.ElementBase;\n"
            "this.base(c);\n"
            "this.setContext = function(d) {\n"
                "if (this.style(\"fill\").Definition.isUrl()) {\n"
                    "var b = this.style(\"fill\").Definition.getFillStyle(this);\n"
                    "if (b != null) d.fillStyle = b\n"
                "} else if (this.style(\"fill\").hasValue()) b = this.style(\"fill\"),\n"
                "this.style(\"fill-opacity\").hasValue() && (b = b.Color.addOpacity(this.style(\"fill-opacity\").value)),\n"
                "d.fillStyle = b.value == \"none\" ? \"rgba(0,0,0,0)\": b.value;\n"
                "if (this.style(\"stroke\").Definition.isUrl()) {\n"
                    "if (b = this.style(\"stroke\").Definition.getFillStyle(this), b != null) d.strokeStyle = b\n"
                "} else if (this.style(\"stroke\").hasValue()) b = this.style(\"stroke\"),\n"
                "this.style(\"stroke-opacity\").hasValue() && (b = b.Color.addOpacity(this.style(\"stroke-opacity\").value)),\n"
                "d.strokeStyle = b.value == \"none\" ? \"rgba(0,0,0,0)\": b.value;\n"
                "if (this.style(\"stroke-width\").hasValue()) d.lineWidth = this.style(\"stroke-width\").Length.toPixels();\n"
                "if (this.style(\"stroke-linecap\").hasValue()) d.lineCap = this.style(\"stroke-linecap\").value;\n"
                "if (this.style(\"stroke-linejoin\").hasValue()) d.lineJoin = this.style(\"stroke-linejoin\").value;\n"
                "if (this.style(\"stroke-miterlimit\").hasValue()) d.miterLimit = this.style(\"stroke-miterlimit\").value;\n"
                "if (typeof d.font != \"undefined\") d.font = a.Font.CreateFont(this.style(\"font-style\").value, this.style(\"font-variant\").value, this.style(\"font-weight\").value, this.style(\"font-size\").hasValue() ? this.style(\"font-size\").Length.toPixels() + \"px\": \"\", this.style(\"font-family\").value).toString();\n"
                "this.attribute(\"transform\").hasValue() && (new a.Transform(this.attribute(\"transform\").value)).apply(d);\n"
                "this.attribute(\"clip-path\").hasValue() && (b = this.attribute(\"clip-path\").Definition.getDefinition(), b != null && b.apply(d));\n"
                "if (this.style(\"opacity\").hasValue()) d.globalAlpha = this.style(\"opacity\").numValue()\n"
            "}\n"
        "};\n"
        "a.Element.RenderedElementBase.prototype = new a.Element.ElementBase;\n"
        "a.Element.PathElementBase = function(c) {\n"
            "this.base = a.Element.RenderedElementBase;\n"
            "this.base(c);\n"
            "this.path = function(d) {\n"
                "d != null && d.beginPath();\n"
                "return new a.BoundingBox\n"
            "};\n"
            "this.renderChildren = function(d) {\n"
                "this.path(d);\n"
                "a.Mouse.checkPath(this, d);\n"
                "d.fillStyle != \"\" && d.fill();\n"
                "d.strokeStyle != \"\" && d.stroke();\n"
                "var b = this.getMarkers();\n"
                "if (b != null) {\n"
                    "if (this.style(\"marker-start\").Definition.isUrl()) {\n"
                        "var c = this.style(\"marker-start\").Definition.getDefinition();\n"
                        "c.render(d, b[0][0], b[0][1])\n"
                    "}\n"
                    "if (this.style(\"marker-mid\").Definition.isUrl()) for (var c = this.style(\"marker-mid\").Definition.getDefinition(), e = 1; e < b.length - 1; e++) c.render(d, b[e][0], b[e][1]);\n"
                    "this.style(\"marker-end\").Definition.isUrl() && (c = this.style(\"marker-end\").Definition.getDefinition(), c.render(d, b[b.length - 1][0], b[b.length - 1][1]))\n"
                "}\n"
            "};\n"
            "this.getBoundingBox = function() {\n"
                "return this.path()\n"
            "};\n"
            "this.getMarkers = function() {\n"
                "return null\n"
            "}\n"
        "};\n"
        "a.Element.PathElementBase.prototype = new a.Element.RenderedElementBase;\n"
        "a.Element.svg = function(c) {\n"
            "this.base = a.Element.RenderedElementBase;\n"
            "this.base(c);\n"
            "this.baseClearContext = this.clearContext;\n"
            "this.clearContext = function(d) {\n"
                "this.baseClearContext(d);\n"
                "a.ViewPort.RemoveCurrent()\n"
            "};\n"
            "this.baseSetContext = this.setContext;\n"
            "this.setContext = function(d) {\n"
                "d.strokeStyle = \"rgba(0,0,0,0)\";\n"
                "d.lineCap = \"butt\";\n"
                "d.lineJoin = \"miter\";\n"
                "d.miterLimit = 4;\n"
                "this.baseSetContext(d);\n"
                "this.attribute(\"x\").hasValue() && this.attribute(\"y\").hasValue() && d.translate(this.attribute(\"x\").Length.toPixels(\"x\"), this.attribute(\"y\").Length.toPixels(\"y\"));\n"
                "var b = a.ViewPort.width(),\n"
                "c = a.ViewPort.height();\n"
                "if (typeof this.root == \"undefined\" && this.attribute(\"width\").hasValue() && this.attribute(\"height\").hasValue()) {\n"
                    "var b = this.attribute(\"width\").Length.toPixels(\"x\"),\n"
                    "c = this.attribute(\"height\").Length.toPixels(\"y\"),\n"
                    "e = 0,\n"
                    "f = 0;\n"
                    "this.attribute(\"refX\").hasValue() && this.attribute(\"refY\").hasValue() && (e = -this.attribute(\"refX\").Length.toPixels(\"x\"), f = -this.attribute(\"refY\").Length.toPixels(\"y\"));\n"
                    "d.beginPath();\n"
                    "d.moveTo(e, f);\n"
                    "d.lineTo(b, f);\n"
                    "d.lineTo(b, c);\n"
                    "d.lineTo(e, c);\n"
                    "d.closePath();\n"
                    "d.clip()\n"
                "}\n"
                "a.ViewPort.SetCurrent(b, c);\n"
                "if (this.attribute(\"viewBox\").hasValue()) {\n"
                    "var e = a.ToNumberArray(this.attribute(\"viewBox\").value),\n"
                    "f = e[0],\n"
                    "g = e[1],\n"
                    "b = e[2],\n"
                    "c = e[3];\n"
                    "a.AspectRatio(d, this.attribute(\"preserveAspectRatio\").value, a.ViewPort.width(), b, a.ViewPort.height(), c, f, g, this.attribute(\"refX\").value, this.attribute(\"refY\").value);\n"
                    "a.ViewPort.RemoveCurrent();\n"
                    "a.ViewPort.SetCurrent(e[2], e[3])\n"
                "}\n"
            "}\n"
        "};\n"
        "a.Element.svg.prototype = new a.Element.RenderedElementBase;\n"
        "a.Element.rect = function(c) {\n"
            "this.base = a.Element.PathElementBase;\n"
            "this.base(c);\n"
            "this.path = function(d) {\n"
                "var b = this.attribute(\"x\").Length.toPixels(\"x\"),\n"
                "c = this.attribute(\"y\").Length.toPixels(\"y\"),\n"
                "e = this.attribute(\"width\").Length.toPixels(\"x\"),\n"
                "f = this.attribute(\"height\").Length.toPixels(\"y\"),\n"
                "g = this.attribute(\"rx\").Length.toPixels(\"x\"),\n"
                "j = this.attribute(\"ry\").Length.toPixels(\"y\");\n"
                "this.attribute(\"rx\").hasValue() && !this.attribute(\"ry\").hasValue() && (j = g);\n"
                "this.attribute(\"ry\").hasValue() && !this.attribute(\"rx\").hasValue() && (g = j);\n"
                "d != null && (d.beginPath(), d.moveTo(b + g, c), d.lineTo(b + e - g, c), d.quadraticCurveTo(b + e, c, b + e, c + j), d.lineTo(b + e, c + f - j), d.quadraticCurveTo(b + e, c + f, b + e - g, c + f), d.lineTo(b + g, c + f), d.quadraticCurveTo(b, c + f, b, c + f - j), d.lineTo(b, c + j), d.quadraticCurveTo(b, c, b + g, c), d.closePath());\n"
                "return new a.BoundingBox(b, c, b + e, c + f)\n"
            "}\n"
        "};\n"
        "a.Element.rect.prototype = new a.Element.PathElementBase;\n"
        "a.Element.circle = function(c) {\n"
            "this.base = a.Element.PathElementBase;\n"
            "this.base(c);\n"
            "this.path = function(d) {\n"
                "var b = this.attribute(\"cx\").Length.toPixels(\"x\"),\n"
                "c = this.attribute(\"cy\").Length.toPixels(\"y\"),\n"
                "e = this.attribute(\"r\").Length.toPixels();\n"
                "d != null && (d.beginPath(), d.arc(b, c, e, 0, Math.PI * 2, !0), d.closePath());\n"
                "return new a.BoundingBox(b - e, c - e, b + e, c + e)\n"
            "}\n"
        "};\n"
        "a.Element.circle.prototype = new a.Element.PathElementBase;\n"
        "a.Element.ellipse = function(c) {\n"
            "this.base = a.Element.PathElementBase;\n"
            "this.base(c);\n"
            "this.path = function(d) {\n"
                "var b = 4 * ((Math.sqrt(2) - 1) / 3),\n"
                "c = this.attribute(\"rx\").Length.toPixels(\"x\"),\n"
                "e = this.attribute(\"ry\").Length.toPixels(\"y\"),\n"
                "f = this.attribute(\"cx\").Length.toPixels(\"x\"),\n"
                "g = this.attribute(\"cy\").Length.toPixels(\"y\");\n"
                "d != null && (d.beginPath(), d.moveTo(f, g - e), d.bezierCurveTo(f + b * c, g - e, f + c, g - b * e, f + c, g), d.bezierCurveTo(f + c, g + b * e, f + b * c, g + e, f, g + e), d.bezierCurveTo(f - b * c, g + e, f - c, g + b * e, f - c, g), d.bezierCurveTo(f - c, g - b * e, f - b * c, g - e, f, g - e), d.closePath());\n"
                "return new a.BoundingBox(f - c, g - e, f + c, g + e)\n"
            "}\n"
        "};\n"
        "a.Element.ellipse.prototype = new a.Element.PathElementBase;\n"
        "a.Element.line = function(c) {\n"
            "this.base = a.Element.PathElementBase;\n"
            "this.base(c);\n"
            "this.getPoints = function() {\n"
                "return [new a.Point(this.attribute(\"x1\").Length.toPixels(\"x\"), this.attribute(\"y1\").Length.toPixels(\"y\")), new a.Point(this.attribute(\"x2\").Length.toPixels(\"x\"), this.attribute(\"y2\").Length.toPixels(\"y\"))]\n"
            "};\n"
            "this.path = function(d) {\n"
                "var b = this.getPoints();\n"
                "d != null && (d.beginPath(), d.moveTo(b[0].x, b[0].y), d.lineTo(b[1].x, b[1].y));\n"
                "return new a.BoundingBox(b[0].x, b[0].y, b[1].x, b[1].y)\n"
            "};\n"
            "this.getMarkers = function() {\n"
                "var a = this.getPoints(),\n"
                "b = a[0].angleTo(a[1]);\n"
                "return [[a[0], b], [a[1], b]]\n"
            "}\n"
        "};\n"
        "a.Element.line.prototype = new a.Element.PathElementBase;\n"
        "a.Element.polyline = function(c) {\n"
            "this.base = a.Element.PathElementBase;\n"
            "this.base(c);\n"
            "this.points = a.CreatePath(this.attribute(\"points\").value);\n"
            "this.path = function(d) {\n"
                "var b = new a.BoundingBox(this.points[0].x, this.points[0].y);\n"
                "d != null && (d.beginPath(), d.moveTo(this.points[0].x, this.points[0].y));\n"
                "for (var c = 1; c < this.points.length; c++) b.addPoint(this.points[c].x, this.points[c].y),\n"
                "d != null && d.lineTo(this.points[c].x, this.points[c].y);\n"
                "return b\n"
            "};\n"
            "this.getMarkers = function() {\n"
                "for (var a = [], b = 0; b < this.points.length - 1; b++) a.push([this.points[b], this.points[b].angleTo(this.points[b + 1])]);\n"
                "a.push([this.points[this.points.length - 1], a[a.length - 1][1]]);\n"
                "return a\n"
            "}\n"
        "};\n"
        "a.Element.polyline.prototype = new a.Element.PathElementBase;\n"
        "a.Element.polygon = function(c) {\n"
            "this.base = a.Element.polyline;\n"
            "this.base(c);\n"
            "this.basePath = this.path;\n"
            "this.path = function(a) {\n"
                "var b = this.basePath(a);\n"
                "a != null && (a.lineTo(this.points[0].x, this.points[0].y), a.closePath());\n"
                "return b\n"
            "}\n"
        "};\n"
        "a.Element.polygon.prototype = new a.Element.polyline;\n"
        "a.Element.path = function(c) {\n"
            "this.base = a.Element.PathElementBase;\n"
            "this.base(c);\n"
            "c = this.attribute(\"d\").value;\n"
            "c = c.replace(/,/gm, \" \");\n"
            "c = c.replace(/([MmZzLlHhVvCcSsQqTtAa])([MmZzLlHhVvCcSsQqTtAa])/gm, \"$1 $2\");\n"
            "c = c.replace(/([MmZzLlHhVvCcSsQqTtAa])([MmZzLlHhVvCcSsQqTtAa])/gm, \"$1 $2\");\n"
            "c = c.replace(/([MmZzLlHhVvCcSsQqTtAa])([^\\s])/gm, \"$1 $2\");\n"
            "c = c.replace(/([^\\s])([MmZzLlHhVvCcSsQqTtAa])/gm, \"$1 $2\");\n"
            "c = c.replace(/([0-9])([+\\-])/gm, \"$1 $2\");\n"
            "c = c.replace(/(\\.[0-9]*)(\\.)/gm, \"$1 $2\");\n"
            "c = c.replace(/([Aa](\\s+[0-9]+){3})\\s+([01])\\s*([01])/gm, \"$1 $3 $4 \");\n"
            "c = a.compressSpaces(c);\n"
            "c = a.trim(c);\n"
            "this.PathParser = new\n"
            "function(d) {\n"
                "this.tokens = d.split(\" \");\n"
                "this.reset = function() {\n"
                    "this.i = -1;\n"
                    "this.previousCommand = this.command = \"\";\n"
                    "this.start = new a.Point(0, 0);\n"
                    "this.control = new a.Point(0, 0);\n"
                    "this.current = new a.Point(0, 0);\n"
                    "this.points = [];\n"
                    "this.angles = []\n"
                "};\n"
                "this.isEnd = function() {\n"
                    "return this.i >= this.tokens.length - 1\n"
                "};\n"
                "this.isCommandOrEnd = function() {\n"
                    "return this.isEnd() ? !0 : this.tokens[this.i + 1].match(/^[A-Za-z]$/) != null\n"
                "};\n"
                "this.isRelativeCommand = function() {\n"
                    "return this.command == this.command.toLowerCase()\n"
                "};\n"
                "this.getToken = function() {\n"
                    "this.i += 1;\n"
                    "return this.tokens[this.i]\n"
                "};\n"
                "this.getScalar = function() {\n"
                    "return parseFloat(this.getToken())\n"
                "};\n"
                "this.nextCommand = function() {\n"
                    "this.previousCommand = this.command;\n"
                    "this.command = this.getToken()\n"
                "};\n"
                "this.getPoint = function() {\n"
                    "return this.makeAbsolute(new a.Point(this.getScalar(), this.getScalar()))\n"
                "};\n"
                "this.getAsControlPoint = function() {\n"
                    "var b = this.getPoint();\n"
                    "return this.control = b\n"
                "};\n"
                "this.getAsCurrentPoint = function() {\n"
                    "var b = this.getPoint();\n"
                    "return this.current = b\n"
                "};\n"
                "this.getReflectedControlPoint = function() {\n"
                    "return this.previousCommand.toLowerCase() != \"c\" && this.previousCommand.toLowerCase() != \"s\" ? this.current: new a.Point(2 * this.current.x - this.control.x, 2 * this.current.y - this.control.y)\n"
                "};\n"
                "this.makeAbsolute = function(b) {\n"
                    "if (this.isRelativeCommand()) b.x = this.current.x + b.x,\n"
                    "b.y = this.current.y + b.y;\n"
                    "return b\n"
                "};\n"
                "this.addMarker = function(b, a, d) {\n"
                    "d != null && this.angles.length > 0 && this.angles[this.angles.length - 1] == null && (this.angles[this.angles.length - 1] = this.points[this.points.length - 1].angleTo(d));\n"
                    "this.addMarkerAngle(b, a == null ? null: a.angleTo(b))\n"
                "};\n"
                "this.addMarkerAngle = function(b, a) {\n"
                    "this.points.push(b);\n"
                    "this.angles.push(a)\n"
                "};\n"
                "this.getMarkerPoints = function() {\n"
                    "return this.points\n"
                "};\n"
                "this.getMarkerAngles = function() {\n"
                    "for (var b = 0; b < this.angles.length; b++) if (this.angles[b] == null) for (var a = b + 1; a < this.angles.length; a++) if (this.angles[a] != null) {\n"
                        "this.angles[b] = this.angles[a];\n"
                        "break\n"
                    "}\n"
                    "return this.angles\n"
                "}\n"
            "} (c);\n"
            "this.path = function(d) {\n"
                "var b = this.PathParser;\n"
                "b.reset();\n"
                "var c = new a.BoundingBox;\n"
                "for (d != null && d.beginPath(); ! b.isEnd();) switch (b.nextCommand(), b.command.toUpperCase()) {\n"
                "case \"M\":\n"
                    "var e = b.getAsCurrentPoint();\n"
                    "b.addMarker(e);\n"
                    "c.addPoint(e.x, e.y);\n"
                    "d != null && d.moveTo(e.x, e.y);\n"
                    "for (b.start = b.current; ! b.isCommandOrEnd();) e = b.getAsCurrentPoint(),\n"
                    "b.addMarker(e, b.start),\n"
                    "c.addPoint(e.x, e.y),\n"
                    "d != null && d.lineTo(e.x, e.y);\n"
                    "break;\n"
                "case \"L\":\n"
                    "for (; ! b.isCommandOrEnd();) {\n"
                        "var f = b.current,\n"
                        "e = b.getAsCurrentPoint();\n"
                        "b.addMarker(e, f);\n"
                        "c.addPoint(e.x, e.y);\n"
                        "d != null && d.lineTo(e.x, e.y)\n"
                    "}\n"
                    "break;\n"
                "case \"H\":\n"
                    "for (; ! b.isCommandOrEnd();) e = new a.Point((b.isRelativeCommand() ? b.current.x: 0) + b.getScalar(), b.current.y),\n"
                    "b.addMarker(e, b.current),\n"
                    "b.current = e,\n"
                    "c.addPoint(b.current.x, b.current.y),\n"
                    "d != null && d.lineTo(b.current.x, b.current.y);\n"
                    "break;\n"
                "case \"V\":\n"
                    "for (; ! b.isCommandOrEnd();) e = new a.Point(b.current.x, (b.isRelativeCommand() ? b.current.y: 0) + b.getScalar()),\n"
                    "b.addMarker(e, b.current),\n"
                    "b.current = e,\n"
                    "c.addPoint(b.current.x, b.current.y),\n"
                    "d != null && d.lineTo(b.current.x, b.current.y);\n"
                    "break;\n"
                "case \"C\":\n"
                    "for (; ! b.isCommandOrEnd();) {\n"
                        "var g = b.current,\n"
                        "f = b.getPoint(),\n"
                        "j = b.getAsControlPoint(),\n"
                        "e = b.getAsCurrentPoint();\n"
                        "b.addMarker(e, j, f);\n"
                        "c.addBezierCurve(g.x, g.y, f.x, f.y, j.x, j.y, e.x, e.y);\n"
                        "d != null && d.bezierCurveTo(f.x, f.y, j.x, j.y, e.x, e.y)\n"
                    "}\n"
                    "break;\n"
                "case \"S\":\n"
                    "for (; ! b.isCommandOrEnd();) g = b.current,\n"
                    "f = b.getReflectedControlPoint(),\n"
                    "j = b.getAsControlPoint(),\n"
                    "e = b.getAsCurrentPoint(),\n"
                    "b.addMarker(e, j, f),\n"
                    "c.addBezierCurve(g.x, g.y, f.x, f.y, j.x, j.y, e.x, e.y),\n"
                    "d != null && d.bezierCurveTo(f.x, f.y, j.x, j.y, e.x, e.y);\n"
                    "break;\n"
                "case \"Q\":\n"
                    "for (; ! b.isCommandOrEnd();) g = b.current,\n"
                    "j = b.getAsControlPoint(),\n"
                    "e = b.getAsCurrentPoint(),\n"
                    "b.addMarker(e, j, j),\n"
                    "c.addQuadraticCurve(g.x, g.y, j.x, j.y, e.x, e.y),\n"
                    "d != null && d.quadraticCurveTo(j.x, j.y, e.x, e.y);\n"
                    "break;\n"
                "case \"T\":\n"
                    "for (; ! b.isCommandOrEnd();) g = b.current,\n"
                    "j = b.getReflectedControlPoint(),\n"
                    "b.control = j,\n"
                    "e = b.getAsCurrentPoint(),\n"
                    "b.addMarker(e, j, j),\n"
                    "c.addQuadraticCurve(g.x, g.y, j.x, j.y, e.x, e.y),\n"
                    "d != null && d.quadraticCurveTo(j.x, j.y, e.x, e.y);\n"
                    "break;\n"
                "case \"A\":\n"
                    "for (; ! b.isCommandOrEnd();) {\n"
                        "var g = b.current,\n"
                        "h = b.getScalar(),\n"
                        "l = b.getScalar(),\n"
                        "f = b.getScalar() * (Math.PI / 180),\n"
                        "o = b.getScalar(),\n"
                        "j = b.getScalar(),\n"
                        "e = b.getAsCurrentPoint(),\n"
                        "n = new a.Point(Math.cos(f) * (g.x - e.x) / 2 + Math.sin(f) * (g.y - e.y) / 2, -Math.sin(f) * (g.x - e.x) / 2 + Math.cos(f) * (g.y - e.y) / 2),\n"
                        "q = Math.pow(n.x, 2) / Math.pow(h, 2) + Math.pow(n.y, 2) / Math.pow(l, 2);\n"
                        "q > 1 && (h *= Math.sqrt(q), l *= Math.sqrt(q));\n"
                        "o = (o == j ? -1 : 1) * Math.sqrt((Math.pow(h, 2) * Math.pow(l, 2) - Math.pow(h, 2) * Math.pow(n.y, 2) - Math.pow(l, 2) * Math.pow(n.x, 2)) / (Math.pow(h, 2) * Math.pow(n.y, 2) + Math.pow(l, 2) * Math.pow(n.x, 2)));\n"
                        "isNaN(o) && (o = 0);\n"
                        "var p = new a.Point(o * h * n.y / l, o * -l * n.x / h),\n"
                        "g = new a.Point((g.x + e.x) / 2 + Math.cos(f) * p.x - Math.sin(f) * p.y, (g.y + e.y) / 2 + Math.sin(f) * p.x + Math.cos(f) * p.y),\n"
                        "m = function(b, a) {\n"
                            "return (b[0] * a[0] + b[1] * a[1]) / (Math.sqrt(Math.pow(b[0], 2) + Math.pow(b[1], 2)) * Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2)))\n"
                        "},\n"
                        "s = function(b, a) {\n"
                            "return (b[0] * a[1] < b[1] * a[0] ? -1 : 1) * Math.acos(m(b, a))\n"
                        "},\n"
                        "o = s([1, 0], [(n.x - p.x) / h, (n.y - p.y) / l]),\n"
                        "q = [(n.x - p.x) / h, (n.y - p.y) / l],\n"
                        "p = [( - n.x - p.x) / h, ( - n.y - p.y) / l],\n"
                        "n = s(q, p);\n"
                        "if (m(q, p) <= -1) n = Math.PI;\n"
                        "m(q, p) >= 1 && (n = 0);\n"
                        "j == 0 && n > 0 && (n -= 2 * Math.PI);\n"
                        "j == 1 && n < 0 && (n += 2 * Math.PI);\n"
                        "q = new a.Point(g.x - h * Math.cos((o + n) / 2), g.y - l * Math.sin((o + n) / 2));\n"
                        "b.addMarkerAngle(q, (o + n) / 2 + (j == 0 ? 1 : -1) * Math.PI / 2);\n"
                        "b.addMarkerAngle(e, n + (j == 0 ? 1 : -1) * Math.PI / 2);\n"
                        "c.addPoint(e.x, e.y);\n"
                        "d != null && (m = h > l ? h: l, e = h > l ? 1 : h / l, h = h > l ? l / h: 1, d.translate(g.x, g.y), d.rotate(f), d.scale(e, h), d.arc(0, 0, m, o, o + n, 1 - j), d.scale(1 / e, 1 / h), d.rotate( - f), d.translate( - g.x, -g.y))\n"
                    "}\n"
                    "break;\n"
                "case \"Z\":\n"
                    "d != null && d.closePath(),\n"
                    "b.current = b.start\n"
                "}\n"
                "return c\n"
            "};\n"
            "this.getMarkers = function() {\n"
                "for (var a = this.PathParser.getMarkerPoints(), b = this.PathParser.getMarkerAngles(), c = [], e = 0; e < a.length; e++) c.push([a[e], b[e]]);\n"
                "return c\n"
            "}\n"
        "};\n"
        "a.Element.path.prototype = new a.Element.PathElementBase;\n"
        "a.Element.pattern = function(c) {\n"
            "this.base = a.Element.ElementBase;\n"
            "this.base(c);\n"
            "this.createPattern = function(d) {\n"
                "var b = new a.Element.svg;\n"
                "b.attributes.viewBox = new a.Property(\"viewBox\", this.attribute(\"viewBox\").value);\n"
                "b.attributes.x = new a.Property(\"x\", this.attribute(\"x\").value);\n"
                "b.attributes.y = new a.Property(\"y\", this.attribute(\"y\").value);\n"
                "b.attributes.width = new a.Property(\"width\", this.attribute(\"width\").value);\n"
                "b.attributes.height = new a.Property(\"height\", this.attribute(\"height\").value);\n"
                "b.children = this.children;\n"
                "var c = document.createElement(\"canvas\");\n"
                "c.width = this.attribute(\"width\").Length.toPixels(\"x\");\n"
                "c.height = this.attribute(\"height\").Length.toPixels(\"y\");\n"
                "b.render(c.getContext(\"2d\"));\n"
                "return d.createPattern(c, \"repeat\")\n"
            "}\n"
        "};\n"
        "a.Element.pattern.prototype = new a.Element.ElementBase;\n"
        "a.Element.marker = function(c) {\n"
            "this.base = a.Element.ElementBase;\n"
            "this.base(c);\n"
            "this.baseRender = this.render;\n"
            "this.render = function(d, b, c) {\n"
                "d.translate(b.x, b.y);\n"
                "this.attribute(\"orient\").valueOrDefault(\"auto\") == \"auto\" && d.rotate(c);\n"
                "this.attribute(\"markerUnits\").valueOrDefault(\"strokeWidth\") == \"strokeWidth\" && d.scale(d.lineWidth, d.lineWidth);\n"
                "d.save();\n"
                "var e = new a.Element.svg;\n"
                "e.attributes.viewBox = new a.Property(\"viewBox\", this.attribute(\"viewBox\").value);\n"
                "e.attributes.refX = new a.Property(\"refX\", this.attribute(\"refX\").value);\n"
                "e.attributes.refY = new a.Property(\"refY\", this.attribute(\"refY\").value);\n"
                "e.attributes.width = new a.Property(\"width\", this.attribute(\"markerWidth\").value);\n"
                "e.attributes.height = new a.Property(\"height\", this.attribute(\"markerHeight\").value);\n"
                "e.attributes.fill = new a.Property(\"fill\", this.attribute(\"fill\").valueOrDefault(\"black\"));\n"
                "e.attributes.stroke = new a.Property(\"stroke\", this.attribute(\"stroke\").valueOrDefault(\"none\"));\n"
                "e.children = this.children;\n"
                "e.render(d);\n"
                "d.restore();\n"
                "this.attribute(\"markerUnits\").valueOrDefault(\"strokeWidth\") == \"strokeWidth\" && d.scale(1 / d.lineWidth, 1 / d.lineWidth);\n"
                "this.attribute(\"orient\").valueOrDefault(\"auto\") == \"auto\" && d.rotate( - c);\n"
                "d.translate( - b.x, -b.y)\n"
            "}\n"
        "};\n"
        "a.Element.marker.prototype = new a.Element.ElementBase;\n"
        "a.Element.defs = function(c) {\n"
            "this.base = a.Element.ElementBase;\n"
            "this.base(c);\n"
            "this.render = function() {}\n"
        "};\n"
        "a.Element.defs.prototype = new a.Element.ElementBase;\n"
        "a.Element.GradientBase = function(c) {\n"
            "this.base = a.Element.ElementBase;\n"
            "this.base(c);\n"
            "this.gradientUnits = this.attribute(\"gradientUnits\").valueOrDefault(\"objectBoundingBox\");\n"
            "this.stops = [];\n"
            "for (c = 0; c < this.children.length; c++) this.stops.push(this.children[c]);\n"
            "this.getGradient = function() {};\n"
            "this.createGradient = function(d, b) {\n"
                "var c = this;\n"
                "this.attribute(\"xlink:href\").hasValue() && (c = this.attribute(\"xlink:href\").Definition.getDefinition());\n"
                "for (var e = this.getGradient(d, b), f = 0; f < c.stops.length; f++) e.addColorStop(c.stops[f].offset, c.stops[f].color);\n"
                "if (this.attribute(\"gradientTransform\").hasValue()) {\n"
                    "c = a.ViewPort.viewPorts[0];\n"
                    "f = new a.Element.rect;\n"
                    "f.attributes.x = new a.Property(\"x\", -a.MAX_VIRTUAL_PIXELS / 3);\n"
                    "f.attributes.y = new a.Property(\"y\", -a.MAX_VIRTUAL_PIXELS / 3);\n"
                    "f.attributes.width = new a.Property(\"width\", a.MAX_VIRTUAL_PIXELS);\n"
                    "f.attributes.height = new a.Property(\"height\", a.MAX_VIRTUAL_PIXELS);\n"
                    "var g = new a.Element.g;\n"
                    "g.attributes.transform = new a.Property(\"transform\", this.attribute(\"gradientTransform\").value);\n"
                    "g.children = [f];\n"
                    "f = new a.Element.svg;\n"
                    "f.attributes.x = new a.Property(\"x\", 0);\n"
                    "f.attributes.y = new a.Property(\"y\", 0);\n"
                    "f.attributes.width = new a.Property(\"width\", c.width);\n"
                    "f.attributes.height = new a.Property(\"height\", c.height);\n"
                    "f.children = [g];\n"
                    "g = document.createElement(\"canvas\");\n"
                    "g.width = c.width;\n"
                    "g.height = c.height;\n"
                    "c = g.getContext(\"2d\");\n"
                    "c.fillStyle = e;\n"
                    "f.render(c);\n"
                    "return c.createPattern(g, \"no-repeat\")\n"
                "}\n"
                "return e\n"
            "}\n"
        "};\n"
        "a.Element.GradientBase.prototype = new a.Element.ElementBase;\n"
        "a.Element.linearGradient = function(c) {\n"
            "this.base = a.Element.GradientBase;\n"
            "this.base(c);\n"
            "this.getGradient = function(a, b) {\n"
                "var c = b.getBoundingBox(),\n"
                "e = this.gradientUnits == \"objectBoundingBox\" ? c.x() + c.width() * this.attribute(\"x1\").numValue() : this.attribute(\"x1\").Length.toPixels(\"x\"),\n"
                "f = this.gradientUnits == \"objectBoundingBox\" ? c.y() + c.height() * this.attribute(\"y1\").numValue() : this.attribute(\"y1\").Length.toPixels(\"y\"),\n"
                "g = this.gradientUnits == \"objectBoundingBox\" ? c.x() + c.width() * this.attribute(\"x2\").numValue() : this.attribute(\"x2\").Length.toPixels(\"x\"),\n"
                "c = this.gradientUnits == \"objectBoundingBox\" ? c.y() + c.height() * this.attribute(\"y2\").numValue() : this.attribute(\"y2\").Length.toPixels(\"y\");\n"
                "return a.createLinearGradient(e, f, g, c)\n"
            "}\n"
        "};\n"
        "a.Element.linearGradient.prototype = new a.Element.GradientBase;\n"
        "a.Element.radialGradient = function(c) {\n"
            "this.base = a.Element.GradientBase;\n"
            "this.base(c);\n"
            "this.getGradient = function(a, b) {\n"
                "var c = b.getBoundingBox(),\n"
                "e = this.gradientUnits == \"objectBoundingBox\" ? c.x() + c.width() * this.attribute(\"cx\").numValue() : this.attribute(\"cx\").Length.toPixels(\"x\"),\n"
                "f = this.gradientUnits == \"objectBoundingBox\" ? c.y() + c.height() * this.attribute(\"cy\").numValue() : this.attribute(\"cy\").Length.toPixels(\"y\"),\n"
                "g = e,\n"
                "j = f;\n"
                "this.attribute(\"fx\").hasValue() && (g = this.gradientUnits == \"objectBoundingBox\" ? c.x() + c.width() * this.attribute(\"fx\").numValue() : this.attribute(\"fx\").Length.toPixels(\"x\"));\n"
                "this.attribute(\"fy\").hasValue() && (j = this.gradientUnits == \"objectBoundingBox\" ? c.y() + c.height() * this.attribute(\"fy\").numValue() : this.attribute(\"fy\").Length.toPixels(\"y\"));\n"
                "c = this.gradientUnits == \"objectBoundingBox\" ? (c.width() + c.height()) / 2 * this.attribute(\"r\").numValue() : this.attribute(\"r\").Length.toPixels();\n"
                "return a.createRadialGradient(g, j, 0, e, f, c)\n"
            "}\n"
        "};\n"
        "a.Element.radialGradient.prototype = new a.Element.GradientBase;\n"
        "a.Element.stop = function(c) {\n"
            "this.base = a.Element.ElementBase;\n"
            "this.base(c);\n"
            "this.offset = this.attribute(\"offset\").numValue();\n"
            "c = this.style(\"stop-color\");\n"
            "this.style(\"stop-opacity\").hasValue() && (c = c.Color.addOpacity(this.style(\"stop-opacity\").value));\n"
            "this.color = c.value\n"
        "};\n"
        "a.Element.stop.prototype = new a.Element.ElementBase;\n"
        "a.Element.AnimateBase = function(c) {\n"
            "this.base = a.Element.ElementBase;\n"
            "this.base(c);\n"
            "a.Animations.push(this);\n"
            "this.duration = 0;\n"
            "this.begin = this.attribute(\"begin\").Time.toMilliseconds();\n"
            "this.maxDuration = this.begin + this.attribute(\"dur\").Time.toMilliseconds();\n"
            "this.getProperty = function() {\n"
                "var a = this.attribute(\"attributeType\").value,\n"
                "b = this.attribute(\"attributeName\").value;\n"
                "return a == \"CSS\" ? this.parent.style(b, !0) : this.parent.attribute(b, !0)\n"
            "};\n"
            "this.initialValue = null;\n"
            "this.removed = !1;\n"
            "this.calcValue = function() {\n"
                "return \"\"\n"
            "};\n"
            "this.update = function(a) {\n"
                "if (this.initialValue == null) this.initialValue = this.getProperty().value;\n"
                "if (this.duration > this.maxDuration) if (this.attribute(\"repeatCount\").value == \"indefinite\") this.duration = 0;\n"
                "else return this.attribute(\"fill\").valueOrDefault(\"remove\") == \"remove\" && !this.removed ? (this.removed = !0, this.getProperty().value = this.initialValue, !0) : !1;\n"
                "this.duration += a;\n"
                "a = !1;\n"
                "if (this.begin < this.duration) a = this.calcValue(),\n"
                "this.attribute(\"type\").hasValue() && (a = this.attribute(\"type\").value + \"(\" + a + \")\"),\n"
                "this.getProperty().value = a,\n"
                "a = !0;\n"
                "return a\n"
            "};\n"
            "this.progress = function() {\n"
                "return (this.duration - this.begin) / (this.maxDuration - this.begin)\n"
            "}\n"
        "};\n"
        "a.Element.AnimateBase.prototype = new a.Element.ElementBase;\n"
        "a.Element.animate = function(c) {\n"
            "this.base = a.Element.AnimateBase;\n"
            "this.base(c);\n"
            "this.calcValue = function() {\n"
                "var a = this.attribute(\"from\").numValue(),\n"
                "b = this.attribute(\"to\").numValue();\n"
                "return a + (b - a) * this.progress()\n"
            "}\n"
        "};\n"
        "a.Element.animate.prototype = new a.Element.AnimateBase;\n"
        "a.Element.animateColor = function(c) {\n"
            "this.base = a.Element.AnimateBase;\n"
            "this.base(c);\n"
            "this.calcValue = function() {\n"
                "var a = new RGBColor(this.attribute(\"from\").value),\n"
                "b = new RGBColor(this.attribute(\"to\").value);\n"
                "if (a.ok && b.ok) {\n"
                    "var c = a.r + (b.r - a.r) * this.progress(),\n"
                    "e = a.g + (b.g - a.g) * this.progress(),\n"
                    "a = a.b + (b.b - a.b) * this.progress();\n"
                    "return \"rgb(\" + parseInt(c, 10) + \",\" + parseInt(e, 10) + \",\" + parseInt(a, 10) + \")\"\n"
                "}\n"
                "return this.attribute(\"from\").value\n"
            "}\n"
        "};\n"
        "a.Element.animateColor.prototype = new a.Element.AnimateBase;\n"
        "a.Element.animateTransform = function(c) {\n"
            "this.base = a.Element.animate;\n"
            "this.base(c)\n"
        "};\n"
        "a.Element.animateTransform.prototype = new a.Element.animate;\n"
        "a.Element.font = function(c) {\n"
            "this.base = a.Element.ElementBase;\n"
            "this.base(c);\n"
            "this.horizAdvX = this.attribute(\"horiz-adv-x\").numValue();\n"
            "this.isArabic = this.isRTL = !1;\n"
            "this.missingGlyph = this.fontFace = null;\n"
            "this.glyphs = [];\n"
            "for (c = 0; c < this.children.length; c++) {\n"
                "var d = this.children[c];\n"
                "if (d.type == \"font-face\") this.fontFace = d,\n"
                "d.style(\"font-family\").hasValue() && (a.Definitions[d.style(\"font-family\").value] = this);\n"
                "else if (d.type == \"missing-glyph\") this.missingGlyph = d;\n"
                "else if (d.type == \"glyph\") d.arabicForm != \"\" ? (this.isArabic = this.isRTL = !0, typeof this.glyphs[d.unicode] == \"undefined\" && (this.glyphs[d.unicode] = []), this.glyphs[d.unicode][d.arabicForm] = d) : this.glyphs[d.unicode] = d\n"
            "}\n"
        "};\n"
        "a.Element.font.prototype = new a.Element.ElementBase;\n"
        "a.Element.fontface = function(c) {\n"
            "this.base = a.Element.ElementBase;\n"
            "this.base(c);\n"
            "this.ascent = this.attribute(\"ascent\").value;\n"
            "this.descent = this.attribute(\"descent\").value;\n"
            "this.unitsPerEm = this.attribute(\"units-per-em\").numValue()\n"
        "};\n"
        "a.Element.fontface.prototype = new a.Element.ElementBase;\n"
        "a.Element.missingglyph = function(c) {\n"
            "this.base = a.Element.path;\n"
            "this.base(c);\n"
            "this.horizAdvX = 0\n"
        "};\n"
        "a.Element.missingglyph.prototype = new a.Element.path;\n"
        "a.Element.glyph = function(c) {\n"
            "this.base = a.Element.path;\n"
            "this.base(c);\n"
            "this.horizAdvX = this.attribute(\"horiz-adv-x\").numValue();\n"
            "this.unicode = this.attribute(\"unicode\").value;\n"
            "this.arabicForm = this.attribute(\"arabic-form\").value\n"
        "};\n"
        "a.Element.glyph.prototype = new a.Element.path;\n"
        "a.Element.text = function(c) {\n"
            "this.base = a.Element.RenderedElementBase;\n"
            "this.base(c);\n"
            "if (c != null) {\n"
                "this.children = [];\n"
                "for (var d = 0; d < c.childNodes.length; d++) {\n"
                    "var b = c.childNodes[d];\n"
                    "b.nodeType == 1 ? this.addChild(b, !0) : b.nodeType == 3 && this.addChild(new a.Element.tspan(b), !1)\n"
                "}\n"
            "}\n"
            "this.baseSetContext = this.setContext;\n"
            "this.setContext = function(b) {\n"
                "this.baseSetContext(b);\n"
                "if (this.style(\"dominant-baseline\").hasValue()) b.textBaseline = this.style(\"dominant-baseline\").value;\n"
                "if (this.style(\"alignment-baseline\").hasValue()) b.textBaseline = this.style(\"alignment-baseline\").value\n"
            "};\n"
            "this.renderChildren = function(b) {\n"
                "for (var a = this.style(\"text-anchor\").valueOrDefault(\"start\"), c = this.attribute(\"x\").Length.toPixels(\"x\"), d = this.attribute(\"y\").Length.toPixels(\"y\"), j = 0; j < this.children.length; j++) {\n"
                    "var h = this.children[j];\n"
                    "h.attribute(\"x\").hasValue() ? h.x = h.attribute(\"x\").Length.toPixels(\"x\") : (h.attribute(\"dx\").hasValue() && (c += h.attribute(\"dx\").Length.toPixels(\"x\")), h.x = c);\n"
                    "c = h.measureText(b);\n"
                    "if (a != \"start\" && (j == 0 || h.attribute(\"x\").hasValue())) {\n"
                        "for (var l = c,\n"
                        "o = j + 1; o < this.children.length; o++) {\n"
                            "var n = this.children[o];\n"
                            "if (n.attribute(\"x\").hasValue()) break;\n"
                            "l += n.measureText(b)\n"
                        "}\n"
                        "h.x -= a == \"end\" ? l: l / 2\n"
                    "}\n"
                    "c = h.x + c;\n"
                    "h.attribute(\"y\").hasValue() ? h.y = h.attribute(\"y\").Length.toPixels(\"y\") : (h.attribute(\"dy\").hasValue() && (d += h.attribute(\"dy\").Length.toPixels(\"y\")), h.y = d);\n"
                    "d = h.y;\n"
                    "h.render(b)\n"
                "}\n"
            "}\n"
        "};\n"
        "a.Element.text.prototype = new a.Element.RenderedElementBase;\n"
        "a.Element.TextElementBase = function(c) {\n"
            "this.base = a.Element.RenderedElementBase;\n"
            "this.base(c);\n"
            "this.getGlyph = function(a, b, c) {\n"
                "var e = b[c],\n"
                "f = null;\n"
                "if (a.isArabic) {\n"
                    "var g = \"isolated\";\n"
                    "if ((c == 0 || b[c - 1] == \" \") && c < b.length - 2 && b[c + 1] != \" \") g = \"terminal\";\n"
                    "c > 0 && b[c - 1] != \" \" && c < b.length - 2 && b[c + 1] != \" \" && (g = \"medial\");\n"
                    "if (c > 0 && b[c - 1] != \" \" && (c == b.length - 1 || b[c + 1] == \" \")) g = \"initial\";\n"
                    "typeof a.glyphs[e] != \"undefined\" && (f = a.glyphs[e][g], f == null && a.glyphs[e].type == \"glyph\" && (f = a.glyphs[e]))\n"
                "} else f = a.glyphs[e];\n"
                "if (f == null) f = a.missingGlyph;\n"
                "return f\n"
            "};\n"
            "this.renderChildren = function(c) {\n"
                "var b = this.parent.style(\"font-family\").Definition.getDefinition();\n"
                "if (b != null) {\n"
                    "var k = this.parent.style(\"font-size\").numValueOrDefault(a.Font.Parse(a.ctx.font).fontSize),\n"
                    "e = this.parent.style(\"font-style\").valueOrDefault(a.Font.Parse(a.ctx.font).fontStyle),\n"
                    "f = this.getText();\n"
                    "b.isRTL && (f = f.split(\"\").reverse().join(\"\"));\n"
                    "for (var g = a.ToNumberArray(this.parent.attribute(\"dx\").value), j = 0; j < f.length; j++) {\n"
                        "var h = this.getGlyph(b, f, j),\n"
                        "l = k / b.fontFace.unitsPerEm;\n"
                        "c.translate(this.x, this.y);\n"
                        "c.scale(l, -l);\n"
                        "var o = c.lineWidth;\n"
                        "c.lineWidth = c.lineWidth * b.fontFace.unitsPerEm / k;\n"
                        "e == \"italic\" && c.transform(1, 0, 0.4, 1, 0, 0);\n"
                        "h.render(c);\n"
                        "e == \"italic\" && c.transform(1, 0, -0.4, 1, 0, 0);\n"
                        "c.lineWidth = o;\n"
                        "c.scale(1 / l, -1 / l);\n"
                        "c.translate( - this.x, -this.y);\n"
                        "this.x += k * (h.horizAdvX || b.horizAdvX) / b.fontFace.unitsPerEm;\n"
                        "typeof g[j] != \"undefined\" && !isNaN(g[j]) && (this.x += g[j])\n"
                    "}\n"
                "} else c.strokeStyle != \"\" && c.strokeText(a.compressSpaces(this.getText()), this.x, this.y),\n"
                "c.fillStyle != \"\" && c.fillText(a.compressSpaces(this.getText()), this.x, this.y)\n"
            "};\n"
            "this.getText = function() {};\n"
            "this.measureText = function(c) {\n"
                "var b = this.parent.style(\"font-family\").Definition.getDefinition();\n"
                "if (b != null) {\n"
                    "var c = this.parent.style(\"font-size\").numValueOrDefault(a.Font.Parse(a.ctx.font).fontSize),\n"
                    "k = 0,\n"
                    "e = this.getText();\n"
                    "b.isRTL && (e = e.split(\"\").reverse().join(\"\"));\n"
                    "for (var f = a.ToNumberArray(this.parent.attribute(\"dx\").value), g = 0; g < e.length; g++) {\n"
                        "var j = this.getGlyph(b, e, g);\n"
                        "k += (j.horizAdvX || b.horizAdvX) * c / b.fontFace.unitsPerEm;\n"
                        "typeof f[g] != \"undefined\" && !isNaN(f[g]) && (k += f[g])\n"
                    "}\n"
                    "return k\n"
                "}\n"
                "b = a.compressSpaces(this.getText());\n"
                "if (!c.measureText) return b.length * 10;\n"
                "c.save();\n"
                "this.setContext(c);\n"
                "b = c.measureText(b).width;\n"
                "c.restore();\n"
                "return b\n"
            "}\n"
        "};\n"
        "a.Element.TextElementBase.prototype = new a.Element.RenderedElementBase;\n"
        "a.Element.tspan = function(c) {\n"
            "this.base = a.Element.TextElementBase;\n"
            "this.base(c);\n"
            "this.text = c.nodeType == 3 ? c.nodeValue: c.childNodes.length > 0 ? c.childNodes[0].nodeValue: c.text;\n"
            "this.getText = function() {\n"
                "return this.text\n"
            "}\n"
        "};\n"
        "a.Element.tspan.prototype = new a.Element.TextElementBase;\n"
        "a.Element.tref = function(c) {\n"
            "this.base = a.Element.TextElementBase;\n"
            "this.base(c);\n"
            "this.getText = function() {\n"
                "var a = this.attribute(\"xlink:href\").Definition.getDefinition();\n"
                "if (a != null) return a.children[0].getText()\n"
            "}\n"
        "};\n"
        "a.Element.tref.prototype = new a.Element.TextElementBase;\n"
        "a.Element.a = function(c) {\n"
            "this.base = a.Element.TextElementBase;\n"
            "this.base(c);\n"
            "this.hasText = !0;\n"
            "for (var d = 0; d < c.childNodes.length; d++) if (c.childNodes[d].nodeType != 3) this.hasText = !1;\n"
            "this.text = this.hasText ? c.childNodes[0].nodeValue: \"\";\n"
            "this.getText = function() {\n"
                "return this.text\n"
            "};\n"
            "this.baseRenderChildren = this.renderChildren;\n"
            "this.renderChildren = function(b) {\n"
                "if (this.hasText) {\n"
                    "this.baseRenderChildren(b);\n"
                    "var c = new a.Property(\"fontSize\", a.Font.Parse(a.ctx.font).fontSize);\n"
                    "a.Mouse.checkBoundingBox(this, new a.BoundingBox(this.x, this.y - c.Length.toPixels(\"y\"), this.x + this.measureText(b), this.y))\n"
                "} else c = new a.Element.g,\n"
                "c.children = this.children,\n"
                "c.parent = this,\n"
                "c.render(b)\n"
            "};\n"
            "this.onclick = function() {\n"
                "window.open(this.attribute(\"xlink:href\").value)\n"
            "};\n"
            "this.onmousemove = function() {\n"
                "a.ctx.canvas.style.cursor = \"pointer\"\n"
            "}\n"
        "};\n"
        "a.Element.a.prototype = new a.Element.TextElementBase;\n"
        "a.Element.image = function(c) {\n"
            "this.base = a.Element.RenderedElementBase;\n"
            "this.base(c);\n"
            "a.Images.push(this);\n"
            "this.img = document.createElement(\"img\");\n"
            "this.loaded = !1;\n"
            "var d = this;\n"
            "this.img.onload = function() {\n"
                "d.loaded = !0\n"
            "};\n"
            "this.img.src = this.attribute(\"xlink:href\").value;\n"
            "this.renderChildren = function(b) {\n"
                "var c = this.attribute(\"x\").Length.toPixels(\"x\"),\n"
                "d = this.attribute(\"y\").Length.toPixels(\"y\"),\n"
                "f = this.attribute(\"width\").Length.toPixels(\"x\"),\n"
                "g = this.attribute(\"height\").Length.toPixels(\"y\");\n"
                "f == 0 || g == 0 || (b.save(), b.translate(c, d), a.AspectRatio(b, this.attribute(\"preserveAspectRatio\").value, f, this.img.width, g, this.img.height, 0, 0), b.drawImage(this.img, 0, 0), b.restore())\n"
            "}\n"
        "};\n"
        "a.Element.image.prototype = new a.Element.RenderedElementBase;\n"
        "a.Element.g = function(c) {\n"
            "this.base = a.Element.RenderedElementBase;\n"
            "this.base(c);\n"
            "this.getBoundingBox = function() {\n"
                "for (var c = new a.BoundingBox,\n"
                "b = 0; b < this.children.length; b++) c.addBoundingBox(this.children[b].getBoundingBox());\n"
                "return c\n"
            "}\n"
        "};\n"
        "a.Element.g.prototype = new a.Element.RenderedElementBase;\n"
        "a.Element.symbol = function(c) {\n"
            "this.base = a.Element.RenderedElementBase;\n"
            "this.base(c);\n"
            "this.baseSetContext = this.setContext;\n"
            "this.setContext = function(c) {\n"
                "this.baseSetContext(c);\n"
                "if (this.attribute(\"viewBox\").hasValue()) {\n"
                    "var b = a.ToNumberArray(this.attribute(\"viewBox\").value),\n"
                    "k = b[0],\n"
                    "e = b[1];\n"
                    "width = b[2];\n"
                    "height = b[3];\n"
                    "a.AspectRatio(c, this.attribute(\"preserveAspectRatio\").value, this.attribute(\"width\").Length.toPixels(\"x\"), width, this.attribute(\"height\").Length.toPixels(\"y\"), height, k, e);\n"
                    "a.ViewPort.SetCurrent(b[2], b[3])\n"
                "}\n"
            "}\n"
        "};\n"
        "a.Element.symbol.prototype = new a.Element.RenderedElementBase;\n"
        "a.Element.style = function(c) {\n"
            "this.base = a.Element.ElementBase;\n"
            "this.base(c);\n"
            "for (var c = c.childNodes[0].nodeValue + (c.childNodes.length > 1 ? c.childNodes[1].nodeValue: \"\"), c = c.replace(/(\\/\\*([^*]|[\\r\\n]|(\\*+([^*\\/]|[\\r\\n])))*\\*+\\/)|(^[\\s]*\\/\\/.*)/gm, \"\"), c = a.compressSpaces(c), c = c.split(\"}\"), d = 0; d < c.length; d++) if (a.trim(c[d]) != \"\") for (var b = c[d].split(\"{\"), k = b[0].split(\",\"), b = b[1].split(\";\"), e = 0; e < k.length; e++) {\n"
                "var f = a.trim(k[e]);\n"
                "if (f != \"\") {\n"
                    "for (var g = {},\n"
                    "j = 0; j < b.length; j++) {\n"
                        "var h = b[j].indexOf(\":\"),\n"
                        "l = b[j].substr(0, h),\n"
                        "h = b[j].substr(h + 1, b[j].length - h);\n"
                        "l != null && h != null && (g[a.trim(l)] = new a.Property(a.trim(l), a.trim(h)))\n"
                    "}\n"
                    "a.Styles[f] = g;\n"
                    "if (f == \"@font-face\") {\n"
                        "f = g[\"font-family\"].value.replace(/\"/g, \"\");\n"
                        "g = g.src.value.split(\",\");\n"
                        "for (j = 0; j < g.length; j++) if (g[j].indexOf('format(\"svg\")') > 0) {\n"
                            "l = g[j].indexOf(\"url\");\n"
                            "h = g[j].indexOf(\")\", l);\n"
                            "l = g[j].substr(l + 5, h - l - 6);\n"
                            "l = a.parseXml(a.ajax(l)).getElementsByTagName(\"font\");\n"
                            "for (h = 0; h < l.length; h++) {\n"
                                "var o = a.CreateElement(l[h]);\n"
                                "a.Definitions[f] = o\n"
                            "}\n"
                        "}\n"
                    "}\n"
                "}\n"
            "}\n"
        "};\n"
        "a.Element.style.prototype = new a.Element.ElementBase;\n"
        "a.Element.use = function(c) {\n"
            "this.base = a.Element.RenderedElementBase;\n"
            "this.base(c);\n"
            "this.baseSetContext = this.setContext;\n"
            "this.setContext = function(a) {\n"
                "this.baseSetContext(a);\n"
                "this.attribute(\"x\").hasValue() && a.translate(this.attribute(\"x\").Length.toPixels(\"x\"), 0);\n"
                "this.attribute(\"y\").hasValue() && a.translate(0, this.attribute(\"y\").Length.toPixels(\"y\"))\n"
            "};\n"
            "this.getDefinition = function() {\n"
                "var a = this.attribute(\"xlink:href\").Definition.getDefinition();\n"
                "if (this.attribute(\"width\").hasValue()) a.attribute(\"width\", !0).value = this.attribute(\"width\").value;\n"
                "if (this.attribute(\"height\").hasValue()) a.attribute(\"height\", !0).value = this.attribute(\"height\").value;\n"
                "return a\n"
            "};\n"
            "this.path = function(a) {\n"
                "var b = this.getDefinition();\n"
                "b != null && b.path(a)\n"
            "};\n"
            "this.renderChildren = function(a) {\n"
                "var b = this.getDefinition();\n"
                "b != null && b.render(a)\n"
            "}\n"
        "};\n"
        "a.Element.use.prototype = new a.Element.RenderedElementBase;\n"
        "a.Element.mask = function(c) {\n"
            "this.base = a.Element.ElementBase;\n"
            "this.base(c);\n"
            "this.apply = function(a, b) {\n"
                "var c = this.attribute(\"x\").Length.toPixels(\"x\"),\n"
                "e = this.attribute(\"y\").Length.toPixels(\"y\"),\n"
                "f = this.attribute(\"width\").Length.toPixels(\"x\"),\n"
                "g = this.attribute(\"height\").Length.toPixels(\"y\"),\n"
                "j = b.attribute(\"mask\").value;\n"
                "b.attribute(\"mask\").value = \"\";\n"
                "var h = document.createElement(\"canvas\");\n"
                "h.width = c + f;\n"
                "h.height = e + g;\n"
                "var l = h.getContext(\"2d\");\n"
                "this.renderChildren(l);\n"
                "var o = document.createElement(\"canvas\");\n"
                "o.width = c + f;\n"
                "o.height = e + g;\n"
                "var n = o.getContext(\"2d\");\n"
                "b.render(n);\n"
                "n.globalCompositeOperation = \"destination-in\";\n"
                "n.fillStyle = l.createPattern(h, \"no-repeat\");\n"
                "n.fillRect(0, 0, c + f, e + g);\n"
                "a.fillStyle = n.createPattern(o, \"no-repeat\");\n"
                "a.fillRect(0, 0, c + f, e + g);\n"
                "b.attribute(\"mask\").value = j\n"
            "};\n"
            "this.render = function() {}\n"
        "};\n"
        "a.Element.mask.prototype = new a.Element.ElementBase;\n"
        "a.Element.clipPath = function(c) {\n"
            "this.base = a.Element.ElementBase;\n"
            "this.base(c);\n"
            "this.apply = function(a) {\n"
                "for (var b = 0; b < this.children.length; b++) this.children[b].path && (this.children[b].path(a), a.clip())\n"
            "};\n"
            "this.render = function() {}\n"
        "};\n"
        "a.Element.clipPath.prototype = new a.Element.ElementBase;\n"
        "a.Element.filter = function(c) {\n"
            "this.base = a.Element.ElementBase;\n"
            "this.base(c);\n"
            "this.apply = function(a, b) {\n"
                "var c = b.getBoundingBox(),\n"
                "e = this.attribute(\"x\").Length.toPixels(\"x\"),\n"
                "f = this.attribute(\"y\").Length.toPixels(\"y\");\n"
                "if (e == 0 || f == 0) e = c.x1,\n"
                "f = c.y1;\n"
                "var g = this.attribute(\"width\").Length.toPixels(\"x\"),\n"
                "j = this.attribute(\"height\").Length.toPixels(\"y\");\n"
                "if (g == 0 || j == 0) g = c.width(),\n"
                "j = c.height();\n"
                "c = b.style(\"filter\").value;\n"
                "b.style(\"filter\").value = \"\";\n"
                "var h = 0.2 * g,\n"
                "l = 0.2 * j,\n"
                "o = document.createElement(\"canvas\");\n"
                "o.width = g + 2 * h;\n"
                "o.height = j + 2 * l;\n"
                "var n = o.getContext(\"2d\");\n"
                "n.translate( - e + h, -f + l);\n"
                "b.render(n);\n"
                "for (var q = 0; q < this.children.length; q++) this.children[q].apply(n, 0, 0, g + 2 * h, j + 2 * l);\n"
                "a.drawImage(o, 0, 0, g + 2 * h, j + 2 * l, e - h, f - l, g + 2 * h, j + 2 * l);\n"
                "b.style(\"filter\", !0).value = c\n"
            "};\n"
            "this.render = function() {}\n"
        "};\n"
        "a.Element.filter.prototype = new a.Element.ElementBase;\n"
        "a.Element.feGaussianBlur = function(c) {\n"
            "function d(a, c, d, f, g) {\n"
                "for (var j = 0; j < g; j++) for (var h = 0; h < f; h++) for (var l = a[j * f * 4 + h * 4 + 3] / 255, o = 0; o < 4; o++) {\n"
                    "for (var n = d[0] * (l == 0 ? 255 : a[j * f * 4 + h * 4 + o]) * (l == 0 || o == 3 ? 1 : l), q = 1; q < d.length; q++) {\n"
                        "var p = Math.max(h - q, 0),\n"
                        "m = a[j * f * 4 + p * 4 + 3] / 255,\n"
                        "p = Math.min(h + q, f - 1),\n"
                        "p = a[j * f * 4 + p * 4 + 3] / 255,\n"
                        "s = d[q],\n"
                        "r;\n"
                        "m == 0 ? r = 255 : (r = Math.max(h - q, 0), r = a[j * f * 4 + r * 4 + o]);\n"
                        "m = r * (m == 0 || o == 3 ? 1 : m);\n"
                        "p == 0 ? r = 255 : (r = Math.min(h + q, f - 1), r = a[j * f * 4 + r * 4 + o]);\n"
                        "n += s * (m + r * (p == 0 || o == 3 ? 1 : p))\n"
                    "}\n"
                    "c[h * g * 4 + j * 4 + o] = n\n"
                "}\n"
            "}\n"
            "this.base = a.Element.ElementBase;\n"
            "this.base(c);\n"
            "this.apply = function(a, c, e, f, g) {\n"
                "var e = this.attribute(\"stdDeviation\").numValue(),\n"
                "c = a.getImageData(0, 0, f, g),\n"
                "e = Math.max(e, 0.01),\n"
                "j = Math.ceil(e * 4) + 1;\n"
                "mask = [];\n"
                "for (var h = 0; h < j; h++) mask[h] = Math.exp( - 0.5 * (h / e) * (h / e));\n"
                "e = mask;\n"
                "j = 0;\n"
                "for (h = 1; h < e.length; h++) j += Math.abs(e[h]);\n"
                "j = 2 * j + Math.abs(e[0]);\n"
                "for (h = 0; h < e.length; h++) e[h] /= j;\n"
                "tmp = [];\n"
                "d(c.data, tmp, e, f, g);\n"
                "d(tmp, c.data, e, g, f);\n"
                "a.clearRect(0, 0, f, g);\n"
                "a.putImageData(c, 0, 0)\n"
            "}\n"
        "};\n"
        "a.Element.filter.prototype = new a.Element.feGaussianBlur;\n"
        "a.Element.title = function() {};\n"
        "a.Element.title.prototype = new a.Element.ElementBase;\n"
        "a.Element.desc = function() {};\n"
        "a.Element.desc.prototype = new a.Element.ElementBase;\n"
        "a.Element.MISSING = function(a) {\n"
            "console.log(\"ERROR: Element '\" + a.nodeName + \"' not yet implemented.\")\n"
        "};\n"
        "a.Element.MISSING.prototype = new a.Element.ElementBase;\n"
        "a.CreateElement = function(c) {\n"
            "var d = c.nodeName.replace(/^[^:]+:/, \"\"),\n"
            "d = d.replace(/\\-/g, \"\"),\n"
            "b = null,\n"
            "b = typeof a.Element[d] != \"undefined\" ? new a.Element[d](c) : new a.Element.MISSING(c);\n"
            "b.type = c.nodeName;\n"
            "return b\n"
        "};\n"
        "a.load = function(c, d) {\n"
            "a.loadXml(c, a.ajax(d))\n"
        "};\n"
        "a.loadXml = function(c, d) {\n"
            "a.loadXmlDoc(c, a.parseXml(d))\n"
        "};\n"
        "a.loadXmlDoc = function(c, d) {\n"
            "a.init(c);\n"
            "var b = function(a) {\n"
                "for (var b = c.canvas; b;) a.x -= b.offsetLeft,\n"
                "a.y -= b.offsetTop,\n"
                "b = b.offsetParent;\n"
                "window.scrollX && (a.x += window.scrollX);\n"
                "window.scrollY && (a.y += window.scrollY);\n"
                "return a\n"
            "};\n"
            "if (a.opts.ignoreMouse != !0) c.canvas.onclick = function(c) {\n"
                "c = b(new a.Point(c != null ? c.clientX: event.clientX, c != null ? c.clientY: event.clientY));\n"
                "a.Mouse.onclick(c.x, c.y)\n"
            "},\n"
            "c.canvas.onmousemove = function(c) {\n"
                "c = b(new a.Point(c != null ? c.clientX: event.clientX, c != null ? c.clientY: event.clientY));\n"
                "a.Mouse.onmousemove(c.x, c.y)\n"
            "};\n"
            "var k = a.CreateElement(d.documentElement),\n"
            "e = k.root = !0,\n"
            "f = function() {\n"
                "a.ViewPort.Clear();\n"
                "c.canvas.parentNode && a.ViewPort.SetCurrent(c.canvas.parentNode.clientWidth, c.canvas.parentNode.clientHeight);\n"
                "if (a.opts.ignoreDimensions != !0) {\n"
                    "if (k.style(\"width\").hasValue()) c.canvas.width = k.style(\"width\").Length.toPixels(\"x\"),\n"
                    "c.canvas.style.width = c.canvas.width + \"px\";\n"
                    "if (k.style(\"height\").hasValue()) c.canvas.height = k.style(\"height\").Length.toPixels(\"y\"),\n"
                    "c.canvas.style.height = c.canvas.height + \"px\"\n"
                "}\n"
                "var b = c.canvas.clientWidth || c.canvas.width,\n"
                "d = c.canvas.clientHeight || c.canvas.height;\n"
                "a.ViewPort.SetCurrent(b, d);\n"
                "if (a.opts != null && a.opts.offsetX != null) k.attribute(\"x\", !0).value = a.opts.offsetX;\n"
                "if (a.opts != null && a.opts.offsetY != null) k.attribute(\"y\", !0).value = a.opts.offsetY;\n"
                "if (a.opts != null && a.opts.scaleWidth != null && a.opts.scaleHeight != null) {\n"
                    "var f = 1,\n"
                    "g = 1;\n"
                    "k.attribute(\"width\").hasValue() && (f = k.attribute(\"width\").Length.toPixels(\"x\") / a.opts.scaleWidth);\n"
                    "k.attribute(\"height\").hasValue() && (g = k.attribute(\"height\").Length.toPixels(\"y\") / a.opts.scaleHeight);\n"
                    "k.attribute(\"width\", !0).value = a.opts.scaleWidth;\n"
                    "k.attribute(\"height\", !0).value = a.opts.scaleHeight;\n"
                    "k.attribute(\"viewBox\", !0).value = \"0 0 \" + b * f + \" \" + d * g;\n"
                    "k.attribute(\"preserveAspectRatio\", !0).value = \"none\"\n"
                "}\n"
                "a.opts.ignoreClear != !0 && c.clearRect(0, 0, b, d);\n"
                "k.render(c);\n"
                "e && (e = !1, a.opts != null && typeof a.opts.renderCallback == \"function\" && a.opts.renderCallback())\n"
            "},\n"
            "g = !0;\n"
            "a.ImagesLoaded() && (g = !1, f());\n"
            "a.intervalID = setInterval(function() {\n"
                "var b = !1;\n"
                "g && a.ImagesLoaded() && (g = !1, b = !0);\n"
                "a.opts.ignoreMouse != !0 && (b |= a.Mouse.hasEvents());\n"
                "if (a.opts.ignoreAnimation != !0) for (var c = 0; c < a.Animations.length; c++) b |= a.Animations[c].update(1E3 / a.FRAMERATE);\n"
                "a.opts != null && typeof a.opts.forceRedraw == \"function\" && a.opts.forceRedraw() == !0 && (b = !0);\n"
                "b && (f(), a.Mouse.runEvents())\n"
            "},\n"
            "1E3 / a.FRAMERATE)\n"
        "};\n"
        "a.stop = function() {\n"
            "a.intervalID && clearInterval(a.intervalID)\n"
        "};\n"
        "a.Mouse = new\n"
        "function() {\n"
            "this.events = [];\n"
            "this.hasEvents = function() {\n"
                "return this.events.length != 0\n"
            "};\n"
            "this.onclick = function(a, d) {\n"
                "this.events.push({\n"
                    "type: \"onclick\",\n"
                    "x: a,\n"
                    "y: d,\n"
                    "run: function(a) {\n"
                        "if (a.onclick) a.onclick()\n"
                    "}\n"
                "})\n"
            "};\n"
            "this.onmousemove = function(a, d) {\n"
                "this.events.push({\n"
                    "type: \"onmousemove\",\n"
                    "x: a,\n"
                    "y: d,\n"
                    "run: function(a) {\n"
                        "if (a.onmousemove) a.onmousemove()\n"
                    "}\n"
                "})\n"
            "};\n"
            "this.eventElements = [];\n"
            "this.checkPath = function(a, d) {\n"
                "for (var b = 0; b < this.events.length; b++) {\n"
                    "var k = this.events[b];\n"
                    "d.isPointInPath && d.isPointInPath(k.x, k.y) && (this.eventElements[b] = a)\n"
                "}\n"
            "};\n"
            "this.checkBoundingBox = function(a, d) {\n"
                "for (var b = 0; b < this.events.length; b++) {\n"
                    "var k = this.events[b];\n"
                    "d.isPointInBox(k.x, k.y) && (this.eventElements[b] = a)\n"
                "}\n"
            "};\n"
            "this.runEvents = function() {\n"
                "a.ctx.canvas.style.cursor = \"\";\n"
                "for (var c = 0; c < this.events.length; c++) for (var d = this.events[c], b = this.eventElements[c]; b;) d.run(b),\n"
                "b = b.parent;\n"
                "this.events = [];\n"
                "this.eventElements = []\n"
            "}\n"
        "};\n"
        "return a\n"
    "}\n"
    "this.canvg = function(a, c, d) {\n"
        "if (a == null && c == null && d == null) for (var c = document.getElementsByTagName(\"svg\"), b = 0; b < c.length; b++) {\n"
            "a = c[b];\n"
            "d = document.createElement(\"canvas\");\n"
            "d.width = a.clientWidth;\n"
            "d.height = a.clientHeight;\n"
            "a.parentNode.insertBefore(d, a);\n"
            "a.parentNode.removeChild(a);\n"
            "var k = document.createElement(\"div\");\n"
            "k.appendChild(a);\n"
            "canvg(d, k.innerHTML)\n"
        "} else d = d || {},\n"
        "typeof a == \"string\" && (a = document.getElementById(a)),\n"
        "a.svg == null ? (b = m(), a.svg = b) : (b = a.svg, b.stop()),\n"
        "b.opts = d,\n"
        "a = a.getContext(\"2d\"),\n"
        "typeof c.documentElement != \"undefined\" ? b.loadXmlDoc(a, c) : c.substr(0, 1) == \"<\" ? b.loadXml(a, c) : b.load(a, c)\n"
    "}\n"
"})();\n"
"if (CanvasRenderingContext2D) CanvasRenderingContext2D.prototype.drawSvg = function(m, a, c, d, b) {\n"
    "canvg(this.canvas, m, {\n"
        "ignoreMouse: !0,\n"
        "ignoreAnimation: !0,\n"
        "ignoreDimensions: !0,\n"
        "ignoreClear: !0,\n"
        "offsetX: a,\n"
        "offsetY: c,\n"
        "scaleWidth: d,\n"
        "scaleHeight: b\n"
    "})\n"
"}; (function(m) {\n"
    "var a = m.css,\n"
    "c = m.CanVGRenderer,\n"
    "d = m.SVGRenderer,\n"
    "b = m.extend,\n"
    "k = m.merge,\n"
    "e = m.addEvent,\n"
    "f = m.createElement,\n"
    "g = m.discardElement;\n"
    "b(c.prototype, d.prototype);\n"
    "b(c.prototype, {\n"
        "create: function(a, b, c, d) {\n"
            "this.setContainer(b, c, d);\n"
            "this.configure(a)\n"
        "},\n"
        "setContainer: function(a, b, c) {\n"
            "var d = a.style,\n"
            "e = a.parentNode,\n"
            "g = d.left,\n"
            "d = d.top,\n"
            "k = a.offsetWidth,\n"
            "m = a.offsetHeight,\n"
            "s = {\n"
                "visibility: \"hidden\",\n"
                "position: \"absolute\"\n"
            "};\n"
            "this.init.apply(this, [a, b, c]);\n"
            "this.canvas = f(\"canvas\", {\n"
                "width: k,\n"
                "height: m\n"
            "},\n"
            "{\n"
                "position: \"relative\",\n"
                "left: g,\n"
                "top: d\n"
            "},\n"
            "a);\n"
            "this.ttLine = f(\"div\", null, s, e);\n"
            "this.ttDiv = f(\"div\", null, s, e);\n"
            "this.ttTimer = void 0;\n"
            "this.hiddenSvg = a = f(\"div\", {\n"
                "width: k,\n"
                "height: m\n"
            "},\n"
            "{\n"
                "visibility: \"hidden\",\n"
                "left: g,\n"
                "top: d\n"
            "},\n"
            "e);\n"
            "a.appendChild(this.box)\n"
        "},\n"
        "configure: function(b) {\n"
            "var c = this,\n"
            "d = b.options.tooltip,\n"
            "f = d.borderWidth,\n"
            "g = c.ttDiv,\n"
            "m = d.style,\n"
            "p = c.ttLine,\n"
            "t = parseInt(m.padding, 10),\n"
            "m = k(m, {\n"
                "padding: t + \"px\",\n"
                "\"background-color\": d.backgroundColor,\n"
                "\"border-style\": \"solid\",\n"
                "\"border-width\": f + \"px\",\n"
                "\"border-radius\": d.borderRadius + \"px\"\n"
            "});\n"
            "d.shadow && (m = k(m, {\n"
                "\"box-shadow\": \"1px 1px 3px gray\",\n"
                "\"-webkit-box-shadow\": \"1px 1px 3px gray\"\n"
            "}));\n"
            "a(g, m);\n"
            "a(p, {\n"
                "\"border-left\": \"1px solid darkgray\"\n"
            "});\n"
            "e(b, \"tooltipRefresh\",\n"
            "function(d) {\n"
                "var e = b.container,\n"
                "f = e.offsetLeft,\n"
                "e = e.offsetTop,\n"
                "k;\n"
                "g.innerHTML = d.text;\n"
                "k = b.tooltip.getPosition(g.offsetWidth, g.offsetHeight, {\n"
                    "plotX: d.x,\n"
                    "plotY: d.y\n"
                "});\n"
                "a(g, {\n"
                    "visibility: \"visible\",\n"
                    "left: k.x + \"px\",\n"
                    "top: k.y + \"px\",\n"
                    "\"border-color\": d.borderColor\n"
                "});\n"
                "a(p, {\n"
                    "visibility: \"visible\",\n"
                    "left: f + d.x + \"px\",\n"
                    "top: e + b.plotTop + \"px\",\n"
                    "height: b.plotHeight + \"px\"\n"
                "});\n"
                "c.ttTimer !== void 0 && clearTimeout(c.ttTimer);\n"
                "c.ttTimer = setTimeout(function() {\n"
                    "a(g, {\n"
                        "visibility: \"hidden\"\n"
                    "});\n"
                    "a(p, {\n"
                        "visibility: \"hidden\"\n"
                    "})\n"
                "},\n"
                "3E3)\n"
            "})\n"
        "},\n"
        "destroy: function() {\n"
            "g(this.canvas);\n"
            "this.ttTimer !== void 0 && clearTimeout(this.ttTimer);\n"
            "g(this.ttLine);\n"
            "g(this.ttDiv);\n"
            "g(this.hiddenSvg);\n"
            "return d.prototype.destroy.apply(this)\n"
        "},\n"
        "color: function(a, b, c) {\n"
            "a && a.linearGradient && (a = a.stops[a.stops.length - 1][1]);\n"
            "return d.prototype.color.call(this, a, b, c)\n"
        "},\n"
        "draw: function() {\n"
            "window.canvg(this.canvas, this.hiddenSvg.innerHTML)\n"
        "}\n"
    "})\n"
"})(Highcharts);\n"
};
#endif
